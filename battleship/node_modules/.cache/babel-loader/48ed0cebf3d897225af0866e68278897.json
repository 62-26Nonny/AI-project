{"ast":null,"code":"export function AI(playerState) {\n  var pos;\n  var max = 0;\n  var max_position;\n  var table = document.getElementById('gurumi');\n  var cells = table.getElementsByClassName('image1');\n  /*\r\n  // Pick the cell with highest prob\r\n  for(var i = 0; i < 100; i++) {\r\n      if (max < playerState.positions[i].probability) {\r\n          max = playerState.positions[i].probability\r\n          max_position = i\r\n      }\r\n  }\r\n    // If there is no such cell\r\n  if(max === 0)\r\n  {\r\n      // Randomly pick one\r\n      do {\r\n          pos = Math.floor(Math.random() * 100)\r\n      } while (playerState.positions[pos].fired)\r\n      max_position = pos\r\n  }\r\n  */\n\n  max_position = 0;\n\n  if (max_position >= 0) {\n    console.log(max_position);\n    cells[max_position].click();\n  } // calculateNextPos(playerState)\n\n\n  playerState.positions[max_position].probability = -1;\n  calculateNextPos(playerState, max_position);\n}\n_c = AI;\n\nfunction calculateNextPos(playerState, current_position) {\n  var randomness = 2;\n  var directions = {\n    'w': null,\n    'n': null,\n    'e': null,\n    's': null\n  };\n  var oppositeDirection;\n  var temp = 1;\n\n  if (playerState.positions[current_position].hit) {\n    /*\r\n    for(var direction in directions) {\r\n        var adjacent = playerState.positions[current_position][direction]\r\n        switch(direction)\r\n        {\r\n            case 'w':\r\n                oppositeDirection = 'e'\r\n                break\r\n            case 'e':\r\n                oppositeDirection = 'w'\r\n                break\r\n            case 'n':\r\n                oppositeDirection = 's'\r\n                break\r\n            case 's':\r\n                oppositeDirection = 'n'\r\n                break\r\n        }\r\n        if(adjacent && adjacent.probability >= 0){\r\n            var random1 = Math.floor(50 * (Math.random() * (randomness - 1) + 1))\r\n            console.log(\"Random with 50 as base : \", random1)\r\n            adjacent.probability += random1\r\n              var nextToAdjacent = adjacent[direction]\r\n            var temp2 = adjacent[oppositeDirection]\r\n            if(temp2){\r\n                while(temp2 && temp2.hit && !temp2.sunk && temp2.probability + temp === 0){\r\n                    temp += 1\r\n                    temp2 = temp2[oppositeDirection]\r\n                }\r\n            }\r\n            \r\n              if(nextToAdjacent && nextToAdjacent.probability >= 0){\r\n                var random2 = Math.floor(25 * (Math.random() * (randomness - 1) + 1))\r\n                console.log(\"Random with 25 as base : \", random2)\r\n                nextToAdjacent.probability += temp * random2\r\n            }\r\n        }\r\n    }\r\n    */\n    var adjacent = playerState.positions[current_position]['s'];\n    var temp2 = playerState.positions[current_position]['n'];\n\n    if (temp2) {\n      while (temp2 && temp2.hit && !temp2.sunk) {\n        temp += 1;\n        temp2 = temp2['n'];\n      }\n    }\n  }\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"AI\");","map":{"version":3,"sources":["F:/Code/Project/AI-project/battleship/src/AI/AI_team2.js"],"names":["AI","playerState","pos","max","max_position","table","document","getElementById","cells","getElementsByClassName","console","log","click","positions","probability","calculateNextPos","current_position","randomness","directions","oppositeDirection","temp","hit","adjacent","temp2","sunk"],"mappings":"AAAA,OAAO,SAASA,EAAT,CAAYC,WAAZ,EAAyB;AAC5B,MAAIC,GAAJ;AACA,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,YAAJ;AACA,MAAIC,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAAZ;AACA,MAAIC,KAAK,GAAGH,KAAK,CAACI,sBAAN,CAA6B,QAA7B,CAAZ;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGIL,EAAAA,YAAY,GAAG,CAAf;;AAEA,MAAGA,YAAY,IAAI,CAAnB,EAAsB;AAClBM,IAAAA,OAAO,CAACC,GAAR,CAAYP,YAAZ;AACAI,IAAAA,KAAK,CAACJ,YAAD,CAAL,CAAoBQ,KAApB;AACH,GAhC2B,CAkC5B;;;AACAX,EAAAA,WAAW,CAACY,SAAZ,CAAsBT,YAAtB,EAAoCU,WAApC,GAAkD,CAAC,CAAnD;AACAC,EAAAA,gBAAgB,CAACd,WAAD,EAAcG,YAAd,CAAhB;AACH;KArCeJ,E;;AAuChB,SAASe,gBAAT,CAA0Bd,WAA1B,EAAuCe,gBAAvC,EAAyD;AACrD,MAAIC,UAAU,GAAG,CAAjB;AACA,MAAIC,UAAU,GAAG;AAAE,SAAK,IAAP;AAAa,SAAK,IAAlB;AAAwB,SAAK,IAA7B;AAAmC,SAAK;AAAxC,GAAjB;AACA,MAAIC,iBAAJ;AACA,MAAIC,IAAI,GAAG,CAAX;;AAEA,MAAGnB,WAAW,CAACY,SAAZ,CAAsBG,gBAAtB,EAAwCK,GAA3C,EAAgD;AAC5C;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGQ,QAAIC,QAAQ,GAAGrB,WAAW,CAACY,SAAZ,CAAsBG,gBAAtB,EAAwC,GAAxC,CAAf;AACA,QAAIO,KAAK,GAAGtB,WAAW,CAACY,SAAZ,CAAsBG,gBAAtB,EAAwC,GAAxC,CAAZ;;AACA,QAAGO,KAAH,EAAS;AACL,aAAMA,KAAK,IAAIA,KAAK,CAACF,GAAf,IAAsB,CAACE,KAAK,CAACC,IAAnC,EAAwC;AACpCJ,QAAAA,IAAI,IAAI,CAAR;AACAG,QAAAA,KAAK,GAAGA,KAAK,CAAC,GAAD,CAAb;AACH;AACJ;AACJ;AACJ","sourcesContent":["export function AI(playerState) {\r\n    var pos\r\n    var max = 0\r\n    var max_position\r\n    var table = document.getElementById('gurumi')\r\n    var cells = table.getElementsByClassName('image1')\r\n\r\n    /*\r\n    // Pick the cell with highest prob\r\n    for(var i = 0; i < 100; i++) {\r\n        if (max < playerState.positions[i].probability) {\r\n            max = playerState.positions[i].probability\r\n            max_position = i\r\n        }\r\n    }\r\n\r\n    // If there is no such cell\r\n    if(max === 0)\r\n    {\r\n        // Randomly pick one\r\n        do {\r\n            pos = Math.floor(Math.random() * 100)\r\n        } while (playerState.positions[pos].fired)\r\n        max_position = pos\r\n    }\r\n    */\r\n\r\n    max_position = 0\r\n    \r\n    if(max_position >= 0) {\r\n        console.log(max_position)\r\n        cells[max_position].click()\r\n    }\r\n\r\n    // calculateNextPos(playerState)\r\n    playerState.positions[max_position].probability = -1\r\n    calculateNextPos(playerState, max_position)\r\n}\r\n\r\nfunction calculateNextPos(playerState, current_position) {\r\n    var randomness = 2\r\n    var directions = { 'w': null, 'n': null, 'e': null, 's': null };\r\n    var oppositeDirection\r\n    var temp = 1\r\n\r\n    if(playerState.positions[current_position].hit) {\r\n        /*\r\n        for(var direction in directions) {\r\n            var adjacent = playerState.positions[current_position][direction]\r\n            switch(direction)\r\n            {\r\n                case 'w':\r\n                    oppositeDirection = 'e'\r\n                    break\r\n                case 'e':\r\n                    oppositeDirection = 'w'\r\n                    break\r\n                case 'n':\r\n                    oppositeDirection = 's'\r\n                    break\r\n                case 's':\r\n                    oppositeDirection = 'n'\r\n                    break\r\n            }\r\n            if(adjacent && adjacent.probability >= 0){\r\n                var random1 = Math.floor(50 * (Math.random() * (randomness - 1) + 1))\r\n                console.log(\"Random with 50 as base : \", random1)\r\n                adjacent.probability += random1\r\n\r\n                var nextToAdjacent = adjacent[direction]\r\n                var temp2 = adjacent[oppositeDirection]\r\n                if(temp2){\r\n                    while(temp2 && temp2.hit && !temp2.sunk && temp2.probability + temp === 0){\r\n                        temp += 1\r\n                        temp2 = temp2[oppositeDirection]\r\n                    }\r\n                }\r\n                \r\n\r\n                if(nextToAdjacent && nextToAdjacent.probability >= 0){\r\n                    var random2 = Math.floor(25 * (Math.random() * (randomness - 1) + 1))\r\n                    console.log(\"Random with 25 as base : \", random2)\r\n                    nextToAdjacent.probability += temp * random2\r\n                }\r\n            }\r\n        }\r\n        */\r\n        var adjacent = playerState.positions[current_position]['s']\r\n        var temp2 = playerState.positions[current_position]['n']\r\n        if(temp2){\r\n            while(temp2 && temp2.hit && !temp2.sunk){\r\n                temp += 1\r\n                temp2 = temp2['n']\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}