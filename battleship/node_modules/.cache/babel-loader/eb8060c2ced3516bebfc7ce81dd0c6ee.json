{"ast":null,"code":"export function AI(playerState) {\n  var pos;\n  var max = 0;\n  var max_position;\n  var table = document.getElementById('gurumi');\n  var cells = table.getElementsByClassName('image1'); // Pick the cell with highest prob\n\n  for (var i = 0; i < 100; i++) {\n    if (max < playerState.positions[i].probability) {\n      max = playerState.positions[i].probability;\n      max_position = i;\n    }\n  } // If there is no such cell\n\n\n  if (max === 0) {\n    // Randomly pick one\n    do {\n      pos = Math.floor(Math.random() * 100);\n    } while (playerState.positions[pos].probability === '-1');\n\n    max_position = pos;\n  }\n\n  if (max_position >= 0) {\n    cells[max_position].click();\n  } // calculateNextPos(playerState)\n\n\n  calculateNextPos(playerState, max_position);\n}\n_c = AI;\n\nfunction calculateNextPos(playerState, current_position) {\n  var randomness = 2;\n  var directions = {\n    'w': null,\n    'n': null,\n    'e': null,\n    's': null\n  };\n  var oppositeDirection;\n  var temp = 1;\n  /*\r\n  // If it's a hit, pick from adjacent cell\r\n  if(playerState.positions[current_position].hit) {\r\n      for(var direction in directions){\r\n          var adjacent = playerState.positions[current_position][direction]\r\n          if(adjacent && adjacent.probability !== -1)\r\n          {\r\n              adjacent.probability += Math.floor(50 * (Math.random() * randomness))\r\n                var nextToAdjacent = playerState.positions[current_position][direction][direction]\r\n                while(adjacent && nextToAdjacent && adjacent.hit && !adjacent.sunk && nextToAdjacent.hit && !nextToAdjacent.sunk)\r\n              {\r\n                  temp += 1\r\n              }\r\n                if(nextToAdjacent && adjacent.probability !== -1)\r\n              {\r\n                  nextToAdjacent.probability += temp * Math.floor(25 * (Math.random() * randomness))\r\n              }\r\n          }\r\n      }\r\n  }\r\n    playerState.positions[current_position].probability = -1\r\n  */\n\n  if (playerState.positions[current_position].hit) {\n    for (var direction in directions) {\n      var adjacent = playerState.positions[current_position][directions];\n      console.log(adjacent);\n    }\n  }\n}\n\nfunction randomDirection(directions) {\n  var direction = Object.keys(directions);\n  var pickedDirection = directions[direction[direction.length * Math.random() << 0]];\n  return pickedDirection;\n}\n\n;\n/*\r\nfunction calculateNextPos(playerState) {\r\n    var randomness = 2\r\n    var directions = { 'w': null, 'n': null, 'e': null, 's': null };\r\n\r\n    console.log(\"In a func\")\r\n    for (var i = 0; i < 100; i++) {\r\n        if(playerState.positions[i].fired) {\r\n            console.log(\"In a 'fired'\", i)\r\n            if(playerState.positions[i].hit && playerState.positions[i].probability !== -1) {\r\n                console.log(\"In a 'sunk'\", i)\r\n                for(var direction in directions){\r\n                    playerState.positions[i][direction].probability += Math.floor(50 * (Math.random() * randomness))\r\n                    if(playerState.positions[i][direction][direction] !== null) {\r\n                        playerState.positions[i][direction][direction].probability += 25 * Math.floor(Math.random() * randomness)\r\n                    }\r\n                }\r\n            }\r\n            // Give -1 \r\n            playerState.positions[i].probability = -1\r\n        }\r\n    }\r\n}\r\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"AI\");","map":{"version":3,"sources":["F:/Code/Project/AI-project/battleship/src/AI/AI_team2.js"],"names":["AI","playerState","pos","max","max_position","table","document","getElementById","cells","getElementsByClassName","i","positions","probability","Math","floor","random","click","calculateNextPos","current_position","randomness","directions","oppositeDirection","temp","hit","direction","adjacent","console","log","randomDirection","Object","keys","pickedDirection","length"],"mappings":"AAAA,OAAO,SAASA,EAAT,CAAYC,WAAZ,EAAyB;AAC5B,MAAIC,GAAJ;AACA,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,YAAJ;AACA,MAAIC,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAAZ;AACA,MAAIC,KAAK,GAAGH,KAAK,CAACI,sBAAN,CAA6B,QAA7B,CAAZ,CAL4B,CAO5B;;AACA,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,GAAnB,EAAwBA,CAAC,EAAzB,EAA6B;AACzB,QAAIP,GAAG,GAAGF,WAAW,CAACU,SAAZ,CAAsBD,CAAtB,EAAyBE,WAAnC,EAAgD;AAC5CT,MAAAA,GAAG,GAAGF,WAAW,CAACU,SAAZ,CAAsBD,CAAtB,EAAyBE,WAA/B;AACAR,MAAAA,YAAY,GAAGM,CAAf;AACH;AACJ,GAb2B,CAe5B;;;AACA,MAAGP,GAAG,KAAK,CAAX,EACA;AACI;AACA,OAAG;AACCD,MAAAA,GAAG,GAAGW,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAAN;AACH,KAFD,QAESd,WAAW,CAACU,SAAZ,CAAsBT,GAAtB,EAA2BU,WAA3B,KAA2C,IAFpD;;AAGAR,IAAAA,YAAY,GAAGF,GAAf;AACH;;AAED,MAAGE,YAAY,IAAI,CAAnB,EAAsB;AAClBI,IAAAA,KAAK,CAACJ,YAAD,CAAL,CAAoBY,KAApB;AACH,GA3B2B,CA6B5B;;;AACAC,EAAAA,gBAAgB,CAAChB,WAAD,EAAcG,YAAd,CAAhB;AACH;KA/BeJ,E;;AAiChB,SAASiB,gBAAT,CAA0BhB,WAA1B,EAAuCiB,gBAAvC,EAAyD;AACrD,MAAIC,UAAU,GAAG,CAAjB;AACA,MAAIC,UAAU,GAAG;AAAE,SAAK,IAAP;AAAa,SAAK,IAAlB;AAAwB,SAAK,IAA7B;AAAmC,SAAK;AAAxC,GAAjB;AACA,MAAIC,iBAAJ;AACA,MAAIC,IAAI,GAAG,CAAX;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMI,MAAGrB,WAAW,CAACU,SAAZ,CAAsBO,gBAAtB,EAAwCK,GAA3C,EAAgD;AAC5C,SAAI,IAAIC,SAAR,IAAqBJ,UAArB,EAAiC;AAC7B,UAAIK,QAAQ,GAAGxB,WAAW,CAACU,SAAZ,CAAsBO,gBAAtB,EAAwCE,UAAxC,CAAf;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACH;AACJ;AACJ;;AAED,SAASG,eAAT,CAA0BR,UAA1B,EAAsC;AAClC,MAAII,SAAS,GAAGK,MAAM,CAACC,IAAP,CAAYV,UAAZ,CAAhB;AACA,MAAIW,eAAe,GAAGX,UAAU,CAACI,SAAS,CAAEA,SAAS,CAACQ,MAAV,GAAmBnB,IAAI,CAACE,MAAL,EAAnB,IAAoC,CAAtC,CAAV,CAAhC;AACA,SAAOgB,eAAP;AACH;;AAAA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["export function AI(playerState) {\r\n    var pos\r\n    var max = 0\r\n    var max_position\r\n    var table = document.getElementById('gurumi')\r\n    var cells = table.getElementsByClassName('image1')\r\n\r\n    // Pick the cell with highest prob\r\n    for(var i = 0; i < 100; i++) {\r\n        if (max < playerState.positions[i].probability) {\r\n            max = playerState.positions[i].probability\r\n            max_position = i\r\n        }\r\n    }\r\n\r\n    // If there is no such cell\r\n    if(max === 0)\r\n    {\r\n        // Randomly pick one\r\n        do {\r\n            pos = Math.floor(Math.random() * 100)\r\n        } while (playerState.positions[pos].probability === '-1')\r\n        max_position = pos\r\n    }\r\n    \r\n    if(max_position >= 0) {\r\n        cells[max_position].click()\r\n    }\r\n\r\n    // calculateNextPos(playerState)\r\n    calculateNextPos(playerState, max_position)\r\n}\r\n\r\nfunction calculateNextPos(playerState, current_position) {\r\n    var randomness = 2\r\n    var directions = { 'w': null, 'n': null, 'e': null, 's': null };\r\n    var oppositeDirection\r\n    var temp = 1\r\n    /*\r\n    // If it's a hit, pick from adjacent cell\r\n    if(playerState.positions[current_position].hit) {\r\n        for(var direction in directions){\r\n            var adjacent = playerState.positions[current_position][direction]\r\n            if(adjacent && adjacent.probability !== -1)\r\n            {\r\n                adjacent.probability += Math.floor(50 * (Math.random() * randomness))\r\n\r\n                var nextToAdjacent = playerState.positions[current_position][direction][direction]\r\n\r\n                while(adjacent && nextToAdjacent && adjacent.hit && !adjacent.sunk && nextToAdjacent.hit && !nextToAdjacent.sunk)\r\n                {\r\n                    temp += 1\r\n                }\r\n\r\n                if(nextToAdjacent && adjacent.probability !== -1)\r\n                {\r\n                    nextToAdjacent.probability += temp * Math.floor(25 * (Math.random() * randomness))\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    playerState.positions[current_position].probability = -1\r\n    */\r\n\r\n    if(playerState.positions[current_position].hit) {\r\n        for(var direction in directions) {\r\n            var adjacent = playerState.positions[current_position][directions]\r\n            console.log(adjacent)\r\n        }\r\n    }\r\n}\r\n\r\nfunction randomDirection (directions) {\r\n    var direction = Object.keys(directions);\r\n    var pickedDirection = directions[direction[ direction.length * Math.random() << 0]];\r\n    return pickedDirection\r\n};\r\n\r\n/*\r\nfunction calculateNextPos(playerState) {\r\n    var randomness = 2\r\n    var directions = { 'w': null, 'n': null, 'e': null, 's': null };\r\n\r\n    console.log(\"In a func\")\r\n    for (var i = 0; i < 100; i++) {\r\n        if(playerState.positions[i].fired) {\r\n            console.log(\"In a 'fired'\", i)\r\n            if(playerState.positions[i].hit && playerState.positions[i].probability !== -1) {\r\n                console.log(\"In a 'sunk'\", i)\r\n                for(var direction in directions){\r\n                    playerState.positions[i][direction].probability += Math.floor(50 * (Math.random() * randomness))\r\n                    if(playerState.positions[i][direction][direction] !== null) {\r\n                        playerState.positions[i][direction][direction].probability += 25 * Math.floor(Math.random() * randomness)\r\n                    }\r\n                }\r\n            }\r\n            // Give -1 \r\n            playerState.positions[i].probability = -1\r\n        }\r\n    }\r\n}\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}