{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gurum\\\\Documents\\\\AI project\\\\battleship\\\\src\\\\components\\\\Table.js\",\n    _s = $RefreshSig$();\n\nimport Container from 'react-bootstrap/Container';\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Table = props => {\n  _s();\n\n  const player = Object.freeze({\n    name: props.player,\n    ship: Array.from([]),\n    position: Array.from([]),\n    founded: 0\n  });\n  const [playerState, setPlayerState] = useState(player);\n  var gameover = false;\n\n  function getRandomInt(min, max) {\n    const minimum = Math.ceil(min);\n    const maximum = Math.floor(max);\n    return Math.floor(Math.random() * (maximum - minimum + 1)) + minimum;\n  }\n\n  function randomShip(min, max, excludeArrayNumbers) {\n    let randomNumber;\n\n    if (!Array.isArray(excludeArrayNumbers)) {\n      randomNumber = getRandomInt(min, max);\n      return randomNumber;\n    }\n\n    do {\n      randomNumber = getRandomInt(min, max);\n    } while ((excludeArrayNumbers || []).includes(randomNumber));\n\n    return randomNumber;\n  }\n\n  function play(e) {\n    checkShip(e);\n\n    if (gameover) {\n      end();\n    }\n  }\n\n  function checkShip(e) {\n    var clicked = [parseInt(e.target.id[0]), parseInt(e.target.id[2])];\n    console.log(clicked);\n    console.log(playerState.ship[0]);\n    var found = playerState.ship.find(ship => {\n      if (ship[0] === clicked[0] && ship[1] === clicked[1]) {\n        return true;\n      } else return false;\n    });\n\n    if (found) {\n      setPlayerState({ ...playerState,\n        founded: playerState.founded + 1\n      });\n\n      if (playerState.founded === 10) {\n        gameover = true;\n      }\n\n      foundShip(e);\n    } else {\n      notFound(e);\n    }\n  }\n\n  function notFound(e) {\n    console.log(playerState.name + ': nothing here...');\n    e.target.src = 'https://tmsvalue.co.uk/wp-content/uploads/2017/03/Square-500x500-red.png';\n  }\n\n  function foundShip(e) {\n    console.log(playerState.name + ': FOUND SHIP!!!');\n    e.target.src = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR9qcrQeLufxv61jZ194tG5CJvux0p4U4-r2g&usqp=CAU';\n  }\n\n  function end() {\n    console.log(playerState.name + 'WIN!!!');\n  }\n\n  function generateShip(size) {\n    // Random => Check available => random available\n    // If not available => Random again\n    var randomIndex = [];\n    var checkAvailable = [];\n    var ship = []; // Random Ship HEAD\n\n    for (let i = 0; i < 2; i++) {\n      randomIndex.push(randomShip(0, 9, randomIndex));\n    } // Check available\n\n\n    for (let i = 1; i <= size; i++) {\n      if (!(randomIndex[0] + size > 9)) {\n        checkAvailable.push([randomIndex[0] + i, randomIndex[1]]);\n      }\n\n      if (!(randomIndex[0] - size < 0)) {\n        checkAvailable.push([randomIndex[0] - i, randomIndex[1]]);\n      }\n\n      if (!(randomIndex[1] + size > 9)) {\n        checkAvailable.push([randomIndex[0], randomIndex[1] + i]);\n      }\n\n      if (!(randomIndex[1] + size < 0)) {\n        checkAvailable.push([randomIndex[0], randomIndex[1] - i]);\n      }\n    }\n\n    ship.push(randomIndex);\n    setPlayerState({ ...playerState,\n      ship: ship\n    });\n    console.log(randomIndex);\n    console.log(checkAvailable);\n  }\n\n  useEffect(() => {\n    generateShip(2);\n  }, [setPlayerState]);\n\n  const createCell = (id, src) => {\n    if (id[0] === 0) {\n      return /*#__PURE__*/_jsxDEV(\"th\", {\n        children: [id[1] + 1, /*#__PURE__*/_jsxDEV(\"td\", {\n          className: \"cell\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            id: id,\n            src: src,\n            onClick: play\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 21\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"td\", {\n      className: \"cell\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        id: id,\n        src: src,\n        onClick: play\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: props.player\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: Array.from({\n        length: 10\n      }).map((_, row) => {\n        var ascii = 65;\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: String.fromCharCode(ascii + row)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 29\n          }, this), Array.from({\n            length: 10\n          }).map((_, col) => {\n            var index = (10 - row - 1) * 10 + (10 - col);\n            var id = [row, col];\n            var src = 'map/' + index + '.jpg';\n            return createCell(id, src);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Table, \"KzrVYW86ABp7zLDQcs4XITTa6AA=\");\n\n_c = Table;\nexport default Table;\n\nvar _c;\n\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"sources":["C:/Users/gurum/Documents/AI project/battleship/src/components/Table.js"],"names":["Container","useEffect","useState","Table","props","player","Object","freeze","name","ship","Array","from","position","founded","playerState","setPlayerState","gameover","getRandomInt","min","max","minimum","Math","ceil","maximum","floor","random","randomShip","excludeArrayNumbers","randomNumber","isArray","includes","play","e","checkShip","end","clicked","parseInt","target","id","console","log","found","find","foundShip","notFound","src","generateShip","size","randomIndex","checkAvailable","i","push","createCell","length","map","_","row","ascii","String","fromCharCode","col","index"],"mappings":"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","sourcesContent":["import Container from 'react-bootstrap/Container'\r\nimport { useEffect, useState } from 'react'\r\n\r\nconst Table = (props) => {\r\n\r\n    const player = Object.freeze({\r\n        name: props.player,\r\n        ship: Array.from([]),\r\n        position: Array.from([]),\r\n        founded: 0,\r\n    })\r\n    const [playerState, setPlayerState] = useState(player)\r\n\r\n    var gameover = false\r\n\r\n    function getRandomInt(min, max) {\r\n        const minimum = Math.ceil(min);\r\n        const maximum = Math.floor(max);\r\n     \r\n        return Math.floor(Math.random() * (maximum - minimum + 1)) + minimum;\r\n     }\r\n    \r\n    function randomShip(min, max, excludeArrayNumbers) {\r\n        let randomNumber;\r\n      \r\n        if(!Array.isArray(excludeArrayNumbers)) {\r\n          randomNumber = getRandomInt(min, max);\r\n          return randomNumber;\r\n        }\r\n      \r\n        do {\r\n          randomNumber = getRandomInt(min, max);\r\n        } while ((excludeArrayNumbers || []).includes(randomNumber));\r\n      \r\n        return randomNumber;\r\n    }\r\n\r\n    function play(e) {\r\n        checkShip(e)\r\n        if(gameover){\r\n            end()\r\n        }\r\n    }\r\n\r\n    function checkShip(e) {\r\n        var clicked = [parseInt(e.target.id[0]), parseInt(e.target.id[2])]\r\n        console.log(clicked)\r\n        console.log(playerState.ship[0])\r\n        var found = playerState.ship.find(ship => {\r\n            if((ship[0] === clicked[0]) && (ship[1] === clicked[1])){\r\n                return true\r\n            }\r\n            else return false\r\n        })\r\n        if(found){\r\n            setPlayerState({\r\n                ...playerState,\r\n                founded: playerState.founded + 1\r\n            })\r\n            if(playerState.founded === 10) {\r\n                gameover = true\r\n            }\r\n            foundShip(e)\r\n        }\r\n        else {\r\n            notFound(e)\r\n        }\r\n    }\r\n\r\n    function notFound(e) {\r\n        console.log(playerState.name + ': nothing here...')\r\n        e.target.src = 'https://tmsvalue.co.uk/wp-content/uploads/2017/03/Square-500x500-red.png'\r\n    }\r\n    \r\n    function foundShip(e) {\r\n        console.log(playerState.name + ': FOUND SHIP!!!')\r\n        e.target.src = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR9qcrQeLufxv61jZ194tG5CJvux0p4U4-r2g&usqp=CAU'\r\n    }\r\n    \r\n    function end() {\r\n        console.log(playerState.name + 'WIN!!!')\r\n    }\r\n\r\n    function generateShip(size) {\r\n        // Random => Check available => random available\r\n        // If not available => Random again\r\n        var randomIndex = []\r\n        var checkAvailable = []\r\n        var ship = []\r\n        // Random Ship HEAD\r\n        for(let i = 0;i < 2;i++){\r\n            randomIndex.push(randomShip(0, 9, randomIndex))\r\n        }\r\n        // Check available\r\n        for(let i = 1;i <= size;i++){\r\n            if(!(randomIndex[0] + size > 9)){\r\n                checkAvailable.push([randomIndex[0] + i, randomIndex[1]])\r\n            }\r\n            if(!(randomIndex[0] - size < 0)){\r\n                checkAvailable.push([randomIndex[0] - i, randomIndex[1]])\r\n            }\r\n            if(!(randomIndex[1] + size > 9)){\r\n                checkAvailable.push([randomIndex[0], randomIndex[1] + i])\r\n            }\r\n            if(!(randomIndex[1] + size < 0)){\r\n                checkAvailable.push([randomIndex[0], randomIndex[1] - i])\r\n            }\r\n        }\r\n        \r\n        ship.push(randomIndex)\r\n        setPlayerState({\r\n            ...playerState,\r\n            ship: ship\r\n        })\r\n        console.log(randomIndex)\r\n        console.log(checkAvailable)\r\n    }\r\n\r\n    useEffect(() => {\r\n        generateShip(2)\r\n    }, [setPlayerState])\r\n\r\n    const createCell = (id, src) => {\r\n\r\n        if (id[0] === 0){\r\n            return( \r\n                    <th>\r\n                        {id[1] + 1} \r\n                        <td className='cell'>\r\n                            <img id={id} src={src} onClick={play} />\r\n                        </td>\r\n                    </th>\r\n            )\r\n        }\r\n        return( \r\n            <td className='cell'>\r\n                <img id={id} src={src} onClick={play} />\r\n            </td>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <h2>{props.player}</h2>\r\n            <table>\r\n                \r\n                {Array.from({ length: 10 }).map((_, row) => {\r\n\r\n                    var ascii = 65\r\n                    return (\r\n                        <tr>\r\n                            <th>\r\n                                 {String.fromCharCode(ascii + row)} \r\n                            </th>\r\n                            {Array.from({ length: 10 }).map((_, col) => {\r\n                                var index = ((10 - row - 1) * 10) + (10 - col)\r\n                                var id = [row, col]\r\n                                var src = 'map/' + index + '.jpg'\r\n                                return(\r\n                                    createCell(id, src)\r\n                                )\r\n                                \r\n                            })}\r\n                        </tr>\r\n                    )\r\n                })}\r\n            </table>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Table\r\n"]},"metadata":{},"sourceType":"module"}