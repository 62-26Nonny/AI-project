{"ast":null,"code":"export function AI(playerState) {\n  var pos;\n  var max = 0;\n  var max_position;\n  var table = document.getElementById('gurumi');\n  var cells = table.getElementsByClassName('image1'); // Pick the cell with highest prob\n\n  for (var i = 0; i < 100; i++) {\n    if (max < playerState.positions[i].probability) {\n      max = playerState.positions[i].probability;\n      max_position = i;\n    }\n  } // If there is no such cell\n\n\n  if (max === 0) {\n    // Randomly pick one\n    do {\n      pos = Math.floor(Math.random() * 100);\n    } while (playerState.positions[pos].fired);\n\n    max_position = pos;\n  }\n\n  if (max_position >= 0) {\n    cells[max_position].click();\n  }\n\n  playerState.positions[max_position].probability = -1;\n  calculateNextPos(playerState, max_position);\n}\n_c = AI;\n\nfunction calculateNextPos(playerState, current_position) {\n  var randomness = 2;\n  var directions = {\n    'w': null,\n    'n': null,\n    'e': null,\n    's': null\n  };\n  var oppositeDirection;\n  var temp;\n  var flag = 0;\n\n  if (playerState.positions[current_position].hit) {\n    for (var direction in directions) {\n      var adjacent = playerState.positions[current_position][direction];\n      temp = 1;\n\n      switch (direction) {\n        case 'w':\n          oppositeDirection = 'e';\n          break;\n\n        case 'e':\n          oppositeDirection = 'w';\n          break;\n\n        case 'n':\n          oppositeDirection = 's';\n          break;\n\n        case 's':\n          oppositeDirection = 'n';\n          break;\n      }\n\n      if (adjacent && adjacent.probability >= 0) {\n        var temp2 = playerState.positions[current_position][oppositeDirection];\n\n        if (temp2) {\n          while (temp2 && temp2.hit && !temp2.sunk && temp2.probability + temp + 1 === 0) {\n            temp += 1;\n            temp2 = temp2[oppositeDirection];\n          }\n        }\n\n        var random = Math.floor(50 * (Math.random() * (randomness - 1) + 1));\n        adjacent.probability += temp * random;\n        console.log(adjacent.index, temp, random, adjacent.probability);\n      }\n    }\n  } else if (playerState.positions[current_position].fired) {\n    for (var direction in directions) {\n      var adjacent = playerState.positions[current_position][direction];\n\n      if (adjacent && adjacent.hit && !adjacent.sunk) {\n        var nextToAdjacent = adjacent;\n\n        while (nextToAdjacent && nextToAdjacent.hit && !nextToAdjacent.sunk) {\n          temp += 1;\n          nextToAdjacent = nextToAdjacent[direction];\n        }\n\n        nextToAdjacent.probability *= temp;\n      } else if (adjacent && adjacent.sunk) {\n        console.log(current_position);\n\n        for (var i = 0; i < 100; i++) {\n          if (playerState.positions[i].probability > 0) {\n            playerState.positions[i].probability = 0;\n          }\n        }\n      }\n    }\n  }\n\n  for (var i = 0; i < 100; i++) {\n    if (playerState.positions[i].probability < 0) {\n      playerState.positions[i].probability -= 1;\n    }\n  }\n\n  console.log(\"\");\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"AI\");","map":{"version":3,"sources":["F:/Code/Project/AI-project/battleship/src/AI/AI_team2.js"],"names":["AI","playerState","pos","max","max_position","table","document","getElementById","cells","getElementsByClassName","i","positions","probability","Math","floor","random","fired","click","calculateNextPos","current_position","randomness","directions","oppositeDirection","temp","flag","hit","direction","adjacent","temp2","sunk","console","log","index","nextToAdjacent"],"mappings":"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","sourcesContent":["export function AI(playerState) {\r\n    var pos\r\n    var max = 0\r\n    var max_position\r\n    var table = document.getElementById('gurumi')\r\n    var cells = table.getElementsByClassName('image1')\r\n\r\n    // Pick the cell with highest prob\r\n    for(var i = 0; i < 100; i++) {\r\n        if (max < playerState.positions[i].probability) {\r\n            max = playerState.positions[i].probability\r\n            max_position = i\r\n        }\r\n    }\r\n\r\n    // If there is no such cell\r\n    if(max === 0)\r\n    {\r\n        // Randomly pick one\r\n        do {\r\n            pos = Math.floor(Math.random() * 100)\r\n        } while (playerState.positions[pos].fired)\r\n        max_position = pos\r\n    }\r\n\r\n    if(max_position >= 0) {\r\n        cells[max_position].click()\r\n    }\r\n\r\n    playerState.positions[max_position].probability = -1\r\n    calculateNextPos(playerState, max_position)\r\n}\r\n\r\nfunction calculateNextPos(playerState, current_position) {\r\n    var randomness = 2\r\n    var directions = { 'w': null, 'n': null, 'e': null, 's': null };\r\n    var oppositeDirection\r\n    var temp\r\n    var flag = 0\r\n\r\n    if(playerState.positions[current_position].hit) {\r\n        for(var direction in directions) {\r\n            var adjacent = playerState.positions[current_position][direction]\r\n            temp = 1\r\n\r\n            switch(direction)\r\n            {\r\n                case 'w':\r\n                    oppositeDirection = 'e'\r\n                    break\r\n                case 'e':\r\n                    oppositeDirection = 'w'\r\n                    break\r\n                case 'n':\r\n                    oppositeDirection = 's'\r\n                    break\r\n                case 's':\r\n                    oppositeDirection = 'n'\r\n                    break\r\n            }\r\n            if(adjacent && adjacent.probability >= 0){\r\n                var temp2 = playerState.positions[current_position][oppositeDirection]\r\n                if(temp2){\r\n                    while(temp2 && temp2.hit && !temp2.sunk && temp2.probability + temp + 1 === 0){\r\n                        temp += 1\r\n                        temp2 = temp2[oppositeDirection]\r\n                    }\r\n                }\r\n\r\n                var random = Math.floor(50 * (Math.random() * (randomness - 1) + 1))\r\n\r\n                adjacent.probability += temp * random\r\n\r\n                console.log(adjacent.index, temp, random, adjacent.probability)\r\n            }\r\n        }\r\n    }\r\n\r\n    else if(playerState.positions[current_position].fired)\r\n    {\r\n        for(var direction in directions)\r\n        {\r\n            var adjacent = playerState.positions[current_position][direction]\r\n\r\n            if (adjacent && adjacent.hit && !adjacent.sunk)\r\n            {\r\n                var nextToAdjacent = adjacent\r\n                while(nextToAdjacent && nextToAdjacent.hit &&  !nextToAdjacent.sunk)\r\n                {\r\n                    temp += 1\r\n                    nextToAdjacent = nextToAdjacent[direction]\r\n                }\r\n                nextToAdjacent.probability *= temp\r\n            }\r\n            else if(adjacent && adjacent.sunk)\r\n            {\r\n                console.log(current_position)\r\n                for(var i = 0; i < 100; i++){\r\n                    if(playerState.positions[i].probability > 0)\r\n                    {\r\n                        playerState.positions[i].probability = 0\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    for(var i = 0; i < 100; i++)\r\n    {\r\n        if(playerState.positions[i].probability < 0)\r\n        {\r\n            playerState.positions[i].probability -= 1\r\n        }\r\n    }\r\n\r\n    console.log(\"\")\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}