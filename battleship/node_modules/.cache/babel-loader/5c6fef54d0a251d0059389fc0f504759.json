{"ast":null,"code":"export function AI(playerState) {\n  var pos;\n  var max = 0;\n  var max_position;\n  var table = document.getElementById('gurumi');\n  var cells = table.getElementsByClassName('image1'); // Pick the cell with highest prob\n\n  for (var i = 0; i < 100; i++) {\n    if (max < playerState.positions[i].probability) {\n      max = playerState.positions[i].probability;\n      max_position = i;\n    }\n  } // If there is no such cell\n\n\n  if (max === 0) {\n    // Randomly pick one\n    do {\n      pos = Math.floor(Math.random() * 100);\n    } while (playerState.positions[pos].fired);\n\n    max_position = pos;\n  }\n\n  if (max_position >= 0) {\n    console.log(max_position);\n    cells[max_position].click();\n  }\n\n  playerState.positions[max_position].probability = -1;\n  calculateNextPos(playerState, max_position);\n}\n_c = AI;\n\nfunction calculateNextPos(playerState, current_position) {\n  var randomness = 2;\n  var directions = {\n    'w': null,\n    'n': null,\n    'e': null,\n    's': null\n  };\n  var oppositeDirection;\n  var temp = 1;\n\n  if (playerState.positions[current_position].hit) {\n    for (var direction in directions) {\n      var adjacent = playerState.positions[current_position][direction];\n\n      switch (direction) {\n        case 'w':\n          oppositeDirection = 'e';\n          break;\n\n        case 'e':\n          oppositeDirection = 'w';\n          break;\n\n        case 'n':\n          oppositeDirection = 's';\n          break;\n\n        case 's':\n          oppositeDirection = 'n';\n          break;\n      }\n\n      if (adjacent && adjacent.probability >= 0) {\n        var random1 = Math.floor(50 * (Math.random() * (randomness - 1) + 1));\n        console.log(\"Random with 50 as base : \", random1);\n        adjacent.probability += random1;\n        var nextToAdjacent = adjacent[direction];\n        var temp2 = adjacent[oppositeDirection];\n\n        if (temp2) {\n          while (temp2 && temp2.hit && !temp2.sunk && temp2.probability + temp === 0) {\n            temp += 1;\n            temp2 = temp2[oppositeDirection];\n          }\n        }\n\n        if (nextToAdjacent && nextToAdjacent.probability >= 0) {\n          var random2 = Math.floor(25 * (Math.random() * (randomness - 1) + 1));\n          console.log(\"Random with 25 as base : \", random2);\n          nextToAdjacent.probability += temp * random2;\n        }\n      }\n    }\n  }\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"AI\");","map":{"version":3,"sources":["F:/Code/Project/AI-project/battleship/src/AI/AI_team2.js"],"names":["AI","playerState","pos","max","max_position","table","document","getElementById","cells","getElementsByClassName","i","positions","probability","Math","floor","random","fired","console","log","click","calculateNextPos","current_position","randomness","directions","oppositeDirection","temp","hit","direction","adjacent","random1","nextToAdjacent","temp2","sunk","random2"],"mappings":"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","sourcesContent":["export function AI(playerState) {\r\n    var pos\r\n    var max = 0\r\n    var max_position\r\n    var table = document.getElementById('gurumi')\r\n    var cells = table.getElementsByClassName('image1')\r\n\r\n    // Pick the cell with highest prob\r\n    for(var i = 0; i < 100; i++) {\r\n        if (max < playerState.positions[i].probability) {\r\n            max = playerState.positions[i].probability\r\n            max_position = i\r\n        }\r\n    }\r\n\r\n    // If there is no such cell\r\n    if(max === 0)\r\n    {\r\n        // Randomly pick one\r\n        do {\r\n            pos = Math.floor(Math.random() * 100)\r\n        } while (playerState.positions[pos].fired)\r\n        max_position = pos\r\n    }\r\n\r\n    if(max_position >= 0) {\r\n        console.log(max_position)\r\n        cells[max_position].click()\r\n    }\r\n\r\n    playerState.positions[max_position].probability = -1\r\n    calculateNextPos(playerState, max_position)\r\n}\r\n\r\nfunction calculateNextPos(playerState, current_position) {\r\n    var randomness = 2\r\n    var directions = { 'w': null, 'n': null, 'e': null, 's': null };\r\n    var oppositeDirection\r\n    var temp = 1\r\n\r\n    if(playerState.positions[current_position].hit) {\r\n        for(var direction in directions) {\r\n            var adjacent = playerState.positions[current_position][direction]\r\n            switch(direction)\r\n            {\r\n                case 'w':\r\n                    oppositeDirection = 'e'\r\n                    break\r\n                case 'e':\r\n                    oppositeDirection = 'w'\r\n                    break\r\n                case 'n':\r\n                    oppositeDirection = 's'\r\n                    break\r\n                case 's':\r\n                    oppositeDirection = 'n'\r\n                    break\r\n            }\r\n            if(adjacent && adjacent.probability >= 0){\r\n                var random1 = Math.floor(50 * (Math.random() * (randomness - 1) + 1))\r\n                console.log(\"Random with 50 as base : \", random1)\r\n                adjacent.probability += random1\r\n\r\n                var nextToAdjacent = adjacent[direction]\r\n                var temp2 = adjacent[oppositeDirection]\r\n                if(temp2){\r\n                    while(temp2 && temp2.hit && !temp2.sunk && temp2.probability + temp === 0){\r\n                        temp += 1\r\n                        temp2 = temp2[oppositeDirection]\r\n                    }\r\n                }\r\n                \r\n\r\n                if(nextToAdjacent && nextToAdjacent.probability >= 0){\r\n                    var random2 = Math.floor(25 * (Math.random() * (randomness - 1) + 1))\r\n                    console.log(\"Random with 25 as base : \", random2)\r\n                    nextToAdjacent.probability += temp * random2\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}