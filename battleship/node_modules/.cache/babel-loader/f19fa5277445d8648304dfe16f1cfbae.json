{"ast":null,"code":"const randomness = 3;\n\nfunction tryShip(playerState, ship, position, direction, propertyToTest) {\n  var check_position = playerState.positions[position];\n  var flag = true;\n\n  for (var i = 1; i <= ship.length; i++) {\n    if (!check_position || check_position[propertyToTest]) {\n      flag = false;\n      break;\n    }\n\n    check_position = check_position[direction];\n  }\n\n  return flag;\n}\n\nexport const AI = () => {\n  var max = 0;\n  var max_position;\n  var table = document.getElementById('Team 2');\n  var cells = table.getElementsByClassName('image1');\n  var positions = Array.from(table.getElementsByClassName('Team 2 image2'));\n  positions.forEach((position, index) => {\n    if (max < parseInt(position.innerHTML)) {\n      max = parseInt(position.innerHTML);\n      max_position = index;\n    }\n  });\n\n  if (max_position) {\n    cells[max_position].click(); // console.log(document.getElementById(max_position))\n\n    console.log(max_position);\n  }\n};\n_c = AI;\nexport function calculateDensity(playerState) {\n  var current_position;\n  var directions = {\n    'w': null,\n    'n': null,\n    'e': null,\n    's': null\n  };\n\n  for (var i = 0; i < 100; i++) {\n    playerState.positions[i].probability = 0;\n  }\n\n  for (var shipName in playerState.ships) {\n    var ship = playerState.ships[shipName];\n\n    if (ship.alive) {\n      for (var i = 0; i < 100; i++) {\n        if (tryShip(playerState, ship, i, 'e', 'fired')) {\n          current_position = playerState.positions[i];\n\n          for (var j = 0; j < ship.length; j++) {\n            current_position.probability++;\n            current_position = current_position['e'];\n          }\n        }\n\n        if (tryShip(playerState, ship, i, 's', 'fired')) {\n          current_position = playerState.positions[i];\n\n          for (var j = 0; j < ship.length; j++) {\n            current_position.probability++;\n            current_position = current_position['s'];\n          }\n        }\n      }\n    }\n  }\n\n  for (var i = 0; i < 100; i++) {\n    if (playerState.positions[i].probability > 0) {\n      playerState.positions[i].probability += Math.floor(Math.random() * randomness);\n    }\n\n    if (playerState.positions[i].fired) {\n      if (playerState.positions[i].hit && !playerState.positions[i].sunk) {\n        for (var direction in directions) {\n          var hitStreak = 1;\n          var checked_position = playerState.positions[i];\n\n          while (checked_position[direction] && checked_position[direction].hit && !checked_position[direction].sunk) {\n            hitStreak++;\n            console.log('Hitstreak now is ' + String(hitStreak));\n            checked_position = checked_position[direction];\n          }\n\n          checked_position = checked_position[direction];\n\n          if (checked_position && !checked_position.fired) {\n            checked_position.probability += hitStreak * 100;\n            console.log(checked_position.index + ' is increase for ' + String(hitStreak * 100));\n          }\n        }\n      }\n\n      playerState.positions[i].probability = -1;\n    }\n  }\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"AI\");","map":{"version":3,"sources":["C:/Users/gurum/Documents/AI project/battleship/src/AI/AI_team1.js"],"names":["randomness","tryShip","playerState","ship","position","direction","propertyToTest","check_position","positions","flag","i","length","AI","max","max_position","table","document","getElementById","cells","getElementsByClassName","Array","from","forEach","index","parseInt","innerHTML","click","console","log","calculateDensity","current_position","directions","probability","shipName","ships","alive","j","Math","floor","random","fired","hit","sunk","hitStreak","checked_position","String"],"mappings":"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","sourcesContent":["const randomness = 3\r\n\r\nfunction tryShip(playerState, ship, position, direction, propertyToTest) {\r\n    var check_position = playerState.positions[position]\r\n    var flag = true\r\n\r\n    for (var i = 1; i <= ship.length; i++) {\r\n        if (!check_position || check_position[propertyToTest]) {\r\n            flag = false;\r\n            break;\r\n        }\r\n        check_position = check_position[direction]\r\n    }\r\n\r\n    return flag\r\n}\r\n\r\nexport const AI = () => {\r\n    var max = 0\r\n    var max_position\r\n    var table = document.getElementById('Team 2')\r\n    var cells = table.getElementsByClassName('image1')\r\n    var positions = Array.from(table.getElementsByClassName('Team 2 image2'))\r\n    positions.forEach((position, index) => {\r\n        if (max < parseInt(position.innerHTML)) {\r\n            max = parseInt(position.innerHTML)\r\n            max_position = index\r\n        }\r\n    })\r\n\r\n    if (max_position) {\r\n        cells[max_position].click()\r\n        // console.log(document.getElementById(max_position))\r\n        console.log(max_position)\r\n    }\r\n}\r\n\r\nexport function calculateDensity(playerState) {\r\n    var current_position\r\n    var directions = { 'w': null, 'n': null, 'e': null, 's': null };\r\n    for (var i = 0; i < 100; i++) {\r\n        playerState.positions[i].probability = 0\r\n    }\r\n    for (var shipName in playerState.ships) {\r\n        var ship = playerState.ships[shipName]\r\n        if (ship.alive) {\r\n            for (var i = 0; i < 100; i++) {\r\n                if (tryShip(playerState, ship, i, 'e', 'fired')) {\r\n                    current_position = playerState.positions[i]\r\n                    for (var j = 0; j < ship.length; j++) {\r\n                        current_position.probability++\r\n                        current_position = current_position['e']\r\n                    }\r\n                }\r\n                if (tryShip(playerState, ship, i, 's', 'fired')) {\r\n                    current_position = playerState.positions[i]\r\n                    for (var j = 0; j < ship.length; j++) {\r\n                        current_position.probability++\r\n                        current_position = current_position['s']\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    for (var i = 0; i < 100; i++) {\r\n        if (playerState.positions[i].probability > 0) {\r\n            playerState.positions[i].probability += Math.floor(Math.random() * randomness)\r\n        }\r\n\r\n        if (playerState.positions[i].fired) {\r\n            if (playerState.positions[i].hit && !playerState.positions[i].sunk) {\r\n\r\n                for (var direction in directions) {\r\n                    var hitStreak = 1\r\n                    var checked_position = playerState.positions[i]\r\n                    while (checked_position[direction] && checked_position[direction].hit && !checked_position[direction].sunk) {\r\n                        hitStreak++\r\n                        console.log('Hitstreak now is ' + String(hitStreak))\r\n                        checked_position = checked_position[direction]\r\n                    }\r\n                    checked_position = checked_position[direction]\r\n                    if (checked_position && !checked_position.fired) {\r\n                        checked_position.probability += hitStreak * 100\r\n                        console.log(checked_position.index + ' is increase for ' + String(hitStreak * 100))\r\n                    }\r\n                }\r\n            }\r\n            playerState.positions[i].probability = -1\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}