[{"C:\\Users\\gurum\\Documents\\AI project\\battleship\\src\\index.js":"1","C:\\Users\\gurum\\Documents\\AI project\\battleship\\src\\reportWebVitals.js":"2","C:\\Users\\gurum\\Documents\\AI project\\battleship\\src\\App.js":"3","C:\\Users\\gurum\\Documents\\AI project\\battleship\\src\\components\\TableTeam1.js":"4","C:\\Users\\gurum\\Documents\\AI project\\battleship\\src\\components\\TableTeam2.js":"5","C:\\Users\\gurum\\Documents\\AI project\\battleship\\src\\AI\\AI_team1.js":"6","C:\\Users\\gurum\\Documents\\AI project\\battleship\\src\\AI\\AI_team2.js":"7"},{"size":500,"mtime":499162500000,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"9"},{"size":2223,"mtime":1636875766233,"results":"11","hashOfConfig":"9"},{"size":16825,"mtime":1636875834979,"results":"12","hashOfConfig":"9"},{"size":16879,"mtime":1636875969409,"results":"13","hashOfConfig":"9"},{"size":3501,"mtime":1636717505317,"results":"14","hashOfConfig":"9"},{"size":6341,"mtime":1636717528172,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"61654y",{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":36,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"18"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"18"},"C:\\Users\\gurum\\Documents\\AI project\\battleship\\src\\index.js",[],["35","36"],"C:\\Users\\gurum\\Documents\\AI project\\battleship\\src\\reportWebVitals.js",[],"C:\\Users\\gurum\\Documents\\AI project\\battleship\\src\\App.js",[],"C:\\Users\\gurum\\Documents\\AI project\\battleship\\src\\components\\TableTeam1.js",["37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72"],"import { Container, Button } from 'react-bootstrap'\r\nimport { useEffect, useState } from 'react'\r\nimport { AI, calculateDensity } from '../AI/AI_team1'\r\nimport { AI2 } from '../AI/AI_team2'\r\n\r\nconst Table1 = (props) => {\r\n\r\n    const water = new Audio('../sfx/water.mp3');\r\n    const explosion = new Audio('../sfx/explosion2.mp3');\r\n\r\n    const randomness = 3\r\n    var positions = []\r\n    for (var i = 0; i < 100; i++) {\r\n        var row = Math.floor(i / 10)\r\n        var col = i % 10\r\n\r\n        positions[i] = {\r\n            index: i,\r\n            probability: 0,\r\n            occupied: false,\r\n            fired: false,\r\n            hit: false,\r\n            sunk: false,\r\n            row: row,\r\n            col: col\r\n        }\r\n    }\r\n\r\n    for (var i = 0; i < 100; i++) {\r\n        positions[i].w = (positions[i - 1] && positions[i - 1].row === positions[i].row) ? positions[i - 1] : null;\r\n        positions[i].e = (positions[i + 1] && positions[i + 1].row === positions[i].row) ? positions[i + 1] : null;\r\n        positions[i].n = positions[i - 10] ? positions[i - 10] : null;\r\n        positions[i].s = positions[i + 10] ? positions[i + 10] : null;\r\n    }\r\n\r\n    //สร้างรูปแบบ state ของ player\r\n    const player = Object.freeze({\r\n        name: props.player,\r\n        board: [\r\n            ['X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X'],\r\n            ['X', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'X'],\r\n            ['X', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'X'],\r\n            ['X', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'X'],\r\n            ['X', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'X'],\r\n            ['X', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'X'],\r\n            ['X', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'X'],\r\n            ['X', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'X'],\r\n            ['X', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'X'],\r\n            ['X', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'X'],\r\n            ['X', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'X'],\r\n            ['X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X']\r\n        ],\r\n        positions: Array.from(positions),\r\n        founded: 0,\r\n        ships: {\r\n            'battleship': {\r\n                alive: true,\r\n                length: 4,\r\n                position: 0,\r\n                orientation: 'vertical',\r\n                life: 4\r\n            },\r\n            'destroyer': {\r\n                alive: true,\r\n                length: 3,\r\n                position: 0,\r\n                orientation: 'vertical',\r\n                life: 3\r\n            },\r\n            'aircraftcarrier': {\r\n                alive: true,\r\n                length: 5,\r\n                position: 0,\r\n                orientation: 'vertical',\r\n                life: 5\r\n            },\r\n            'submarine': {\r\n                alive: true,\r\n                length: 3,\r\n                position: 0,\r\n                orientation: 'vertical',\r\n                life: 3\r\n            },\r\n            'patrolboat': {\r\n                alive: true,\r\n                length: 2,\r\n                position: 0,\r\n                orientation: 'vertical',\r\n                life: 2\r\n            },\r\n        }\r\n    })\r\n\r\n    //สร้าง plyer state โดยใช้รูปแบบ player\r\n    const [playerState, setPlayerState] = useState(player)\r\n\r\n    function tryShip(ship, position, direction, propertyToTest) {\r\n        var check_position = playerState.positions[position]\r\n        var flag = true\r\n\r\n        for (var i = 1; i <= ship.length; i++) {\r\n            if (!check_position || check_position[propertyToTest]) {\r\n                flag = false;\r\n                break;\r\n            }\r\n            check_position = check_position[direction]\r\n        }\r\n\r\n        return flag\r\n    }\r\n\r\n    // ฟั่งชั่นที่ทำงานเมื่อผู้เล่นกดช่องตาราง \r\n    function play(e) {\r\n        if (props.alreadypick.includes(e.target.id)) {\r\n            console.log(props.enemy + ' choose the same position');\r\n        }\r\n        else {\r\n            if(props.turn === props.enemy){\r\n                var allDead = true\r\n\r\n                //เช็คว่ามีเรือรึเปล่า\r\n                props.setAlreadypick(arr => [...arr, e.target.id])\r\n                checkShip(e)\r\n                //เช็คว่าเกมจบรึยัง\r\n                for (var ship in playerState.ships) {\r\n                    if (playerState.ships[ship].alive) {\r\n                        allDead = false\r\n                    }\r\n                }\r\n                \r\n                if (allDead) {\r\n                    end()\r\n                    clearInterval(setInterval(AI, 100))\r\n                    clearInterval(setInterval(AI2, 100, playerState)) //to stop Nut's AI\r\n                    console.log('GAME OVER')\r\n                    props.setTurn(\"Team 2 win\")\r\n                }\r\n            }\r\n            else if(props.turn === props.player){\r\n                console.log(props.enemy + ' can not play')\r\n            }\r\n            else {\r\n                console.log('Not ' + props.enemy + ' turn')\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    // ฟังก์ชั่นสุ่มสำหรับเซ็กว่าผู้เล่นยิงโดนเรือตรงข้ามหรือไม่\r\n    function checkShip(e) {\r\n        // ให้ตัวแปล clicked เก็บตำแหน่งที่ผู้เล่นกด\r\n        var row = playerState.positions[e.target.id].row\r\n        var col = playerState.positions[e.target.id].col\r\n        // console.log(\"Clicked at \" + clicked)\r\n        var flag = false\r\n        // เช็คว่าเจอเรือไหม (เรือ: \"O\")\r\n        var check_cell = playerState.board[row + 1][col + 1]\r\n        if (!(check_cell === \"-\")) {\r\n            switch (check_cell) {\r\n                case 'B':\r\n                    playerState.ships['battleship'].life--\r\n                    if (playerState.ships['battleship'].life === 0) {\r\n                        playerState.ships['battleship'].alive = false\r\n                        var prow_position = playerState.ships['battleship'].position\r\n                        var directions = (playerState.ships['battleship'].orientation == 'e') ? 1 : 10\r\n                        for (var i=0; i < playerState.ships['battleship'].length; i++) {\r\n                            playerState.positions[prow_position + (i * directions)].sunk = true\r\n                        }\r\n                        console.log(playerState.name + \"'s Battleship is sunk!!\")\r\n                    }\r\n                    break\r\n                case 'D':\r\n                    playerState.ships['destroyer'].life--\r\n                    if (playerState.ships['destroyer'].life === 0) {\r\n                        playerState.ships['destroyer'].alive = false\r\n                        var prow_position = playerState.ships['destroyer'].position\r\n                        var directions = (playerState.ships['destroyer'].orientation == 'e') ? 1 : 10\r\n                        for (var i=0; i < playerState.ships['destroyer'].length; i++) {\r\n                            playerState.positions[prow_position + (i * directions)].sunk = true\r\n                        }\r\n                        console.log(playerState.name + \"'s Destroyer is sunk!!\")\r\n                    }\r\n                    break\r\n                case 'A':\r\n                    playerState.ships['aircraftcarrier'].life--\r\n                    if (playerState.ships['aircraftcarrier'].life === 0) {\r\n                        playerState.ships['aircraftcarrier'].alive = false\r\n                        var prow_position = playerState.ships['aircraftcarrier'].position\r\n                        var directions = (playerState.ships['aircraftcarrier'].orientation == 'e') ? 1 : 10\r\n                        for (var i=0; i < playerState.ships['aircraftcarrier'].length; i++) {\r\n                            playerState.positions[prow_position + (i * directions)].sunk = true\r\n                        }\r\n                        console.log(playerState.name + \"'s Aircraftcarrier is sunk!!\")\r\n                    }\r\n                    break\r\n                case 'S':\r\n                    playerState.ships['submarine'].life--\r\n                    if (playerState.ships['submarine'].life === 0) {\r\n                        playerState.ships['submarine'].alive = false\r\n                        var prow_position = playerState.ships['submarine'].position\r\n                        var directions = (playerState.ships['submarine'].orientation == 'e') ? 1 : 10\r\n                        for (var i=0; i < playerState.ships['submarine'].length; i++) {\r\n                            playerState.positions[prow_position + (i * directions)].sunk = true\r\n                        }\r\n                        console.log(playerState.name + \"'s Submarine is sunk!!\")\r\n                    }\r\n                    break\r\n                case 'P':\r\n                    playerState.ships['patrolboat'].life--\r\n                    if (playerState.ships['patrolboat'].life === 0) {\r\n                        playerState.ships['patrolboat'].alive = false\r\n                        var prow_position = playerState.ships['patrolboat'].position\r\n                        var directions = (playerState.ships['patrolboat'].orientation == 'e') ? 1 : 10\r\n                        for (var i=0; i < playerState.ships['patrolboat'].length; i++) {\r\n                            playerState.positions[prow_position + (i * directions)].sunk = true\r\n                        }\r\n                        console.log(playerState.name + \"'s Patrolboat is sunk!!\")\r\n                    }\r\n                    break\r\n            }\r\n            console.log(\"Position at \" + e.target.id)\r\n            playerState.positions[e.target.id].fired = true\r\n            playerState.positions[e.target.id].hit = true\r\n            // console.log('After hit')\r\n            e.target.src = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR9qcrQeLufxv61jZ194tG5CJvux0p4U4-r2g&usqp=CAU'\r\n            flag = true\r\n            props.setTurn(props.enemy)\r\n            explosion.play();\r\n        } else {\r\n            props.setTurn(props.player)\r\n            playerState.positions[e.target.id].fired = true\r\n            // console.log('After fired ')\r\n            console.log(playerState.name + ': nothing here...')\r\n            e.target.src = 'https://tmsvalue.co.uk/wp-content/uploads/2017/03/Square-500x500-red.png'\r\n            flag = false\r\n            water.play();\r\n        }\r\n\r\n        // console.table(playerState.positions)\r\n        var cells = document.getElementsByClassName(playerState.name + ' image2')\r\n        for (var i = 0; i < 100; i++) {\r\n            cells[i].innerHTML = playerState.positions[i].probability\r\n        }\r\n\r\n        return flag\r\n    }\r\n\r\n    function end() {\r\n        console.log(playerState.name + 'Lose!!!')\r\n    }\r\n\r\n    function placeShips() {\r\n        var index, row, col, orientation, validPosition = false, lastPosition;\r\n        for (var ship in playerState.ships) {\r\n            while (!validPosition) {\r\n                index = getRandomPosition();\r\n                row = Math.floor(index / 10) + 1\r\n                col = (index % 10) + 1\r\n                orientation = (Math.random() * 2 > 1) ? 'e' : 's';\r\n                if (tryShip(playerState.ships[ship], index, orientation, 'occupied')) {\r\n                    validPosition = true;\r\n                }\r\n            }\r\n            playerState.ships[ship].orientation = orientation\r\n            lastPosition = playerState.positions[index];\r\n            for (var i = 0; i < playerState.ships[ship].length; i++) {\r\n                switch (ship) {\r\n                    case 'battleship':\r\n                        if (playerState.ships[ship].orientation == 'e') {\r\n                            playerState.board[row][col + i] = 'B'\r\n                        }\r\n                        else if (playerState.ships[ship].orientation == 's') {\r\n                            playerState.board[row + i][col] = 'B'\r\n                        }\r\n                        break\r\n                    case 'destroyer':\r\n                        if (playerState.ships[ship].orientation == 'e') {\r\n                            playerState.board[row][col + i] = 'D'\r\n                        }\r\n                        else if (playerState.ships[ship].orientation == 's') {\r\n                            playerState.board[row + i][col] = 'D'\r\n                        }\r\n                        break\r\n                    case 'aircraftcarrier':\r\n                        if (playerState.ships[ship].orientation == 'e') {\r\n                            playerState.board[row][col + i] = 'A'\r\n                        }\r\n                        else if (playerState.ships[ship].orientation == 's') {\r\n                            playerState.board[row + i][col] = 'A'\r\n                        }\r\n                        break\r\n                    case 'submarine':\r\n                        if (playerState.ships[ship].orientation == 'e') {\r\n                            playerState.board[row][col + i] = 'S'\r\n                        }\r\n                        else if (playerState.ships[ship].orientation == 's') {\r\n                            playerState.board[row + i][col] = 'S'\r\n                        }\r\n                        break\r\n                    case 'patrolboat':\r\n                        if (playerState.ships[ship].orientation == 'e') {\r\n                            playerState.board[row][col + i] = 'P'\r\n                        }\r\n                        else if (playerState.ships[ship].orientation == 's') {\r\n                            playerState.board[row + i][col] = 'P'\r\n                        }\r\n                        break\r\n                }\r\n                lastPosition.occupied = true;\r\n                lastPosition = lastPosition[orientation];\r\n            }\r\n            playerState.ships[ship].position = index;\r\n            validPosition = false;\r\n        }\r\n    }\r\n\r\n    function getRandomPosition() {\r\n        return Math.floor(Math.random() * 100);\r\n    }\r\n\r\n    function startPlaying() {        \r\n        setInterval(AI2, 100, playerState)\r\n    }\r\n\r\n    useEffect(() => {\r\n        placeShips()\r\n        console.log(playerState.name + \" board: \")\r\n        console.log(playerState.board)\r\n        console.log(playerState.ships)\r\n    }, [setPlayerState])\r\n\r\n    // สร้างตารางโดยรับค่า id และ src\r\n    const createCell = (id, src) => {\r\n\r\n        // ถ้าเป็นแถวแรกให้สร้าง header ระบุเลขช่องด้วยนอกจากนั้นก็สร้างแค่ช่องปกติ\r\n        if (id < 10) {\r\n            return (\r\n                <th>\r\n                    {id}\r\n                    <td className='cell parent'>\r\n                        <img class=\"image1\" id={id} src={src} onClick={play} />\r\n                        <div class={playerState.name + ' image2'}> {Math.floor(playerState.positions[id].probability)} </div>\r\n                    </td>\r\n                </th>\r\n            )\r\n        }\r\n        return (\r\n            <td className='cell parent'>\r\n                <img class=\"image1\" id={id} src={src} onClick={play} />\r\n                <div class={playerState.name + ' image2'}> {Math.floor(playerState.positions[id].probability)} </div>\r\n            </td>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <h2>{props.player}</h2>\r\n            <table id={playerState.name}>\r\n\r\n                {Array.from({ length: 10 }).map((_, row) => {\r\n\r\n                    var ascii = 65\r\n                    return (\r\n                        <tr>\r\n                            <th>\r\n                                {String.fromCharCode(ascii + row)}\r\n                            </th>\r\n                            {Array.from({ length: 10 }).map((_, col) => {\r\n                                var index = ((10 - row - 1) * 10) + (10 - col)\r\n                                var id = (row * 10) + col\r\n                                var src = 'map/' + index + '.jpg'\r\n                                return (\r\n                                    createCell(id, src)\r\n                                )\r\n                            })}\r\n                        </tr>\r\n                    )\r\n                })}\r\n            </table>\r\n            <Button id='button_AI1' className='hidden' onClick={startPlaying}>Start</Button>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Table1","C:\\Users\\gurum\\Documents\\AI project\\battleship\\src\\components\\TableTeam2.js",["73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107"],"import { Container, Button } from 'react-bootstrap'\r\nimport { useEffect, useState } from 'react'\r\nimport { AI, calculateDensity } from '../AI/AI_team1'\r\nimport { AI2 } from '../AI/AI_team2'\r\n\r\nconst Table2 = (props) => {\r\n\r\n    const water = new Audio('../sfx/water.mp3');\r\n    const explosion = new Audio('../sfx/explosion2.mp3');\r\n\r\n    const randomness = 3\r\n    var positions = []\r\n    for (var i = 0; i < 100; i++) {\r\n        var row = Math.floor(i / 10)\r\n        var col = i % 10\r\n\r\n        positions[i] = {\r\n            index: i,\r\n            probability: 0,\r\n            occupied: false,\r\n            fired: false,\r\n            hit: false,\r\n            sunk: false,\r\n            row: row,\r\n            col: col\r\n        }\r\n    }\r\n\r\n    for (var i = 0; i < 100; i++) {\r\n        positions[i].w = (positions[i - 1] && positions[i - 1].row === positions[i].row) ? positions[i - 1] : null;\r\n        positions[i].e = (positions[i + 1] && positions[i + 1].row === positions[i].row) ? positions[i + 1] : null;\r\n        positions[i].n = positions[i - 10] ? positions[i - 10] : null;\r\n        positions[i].s = positions[i + 10] ? positions[i + 10] : null;\r\n    }\r\n\r\n    //สร้างรูปแบบ state ของ player\r\n    const player = Object.freeze({\r\n        name: props.player,\r\n        board: [\r\n            ['X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X'],\r\n            ['X', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'X'],\r\n            ['X', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'X'],\r\n            ['X', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'X'],\r\n            ['X', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'X'],\r\n            ['X', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'X'],\r\n            ['X', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'X'],\r\n            ['X', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'X'],\r\n            ['X', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'X'],\r\n            ['X', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'X'],\r\n            ['X', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'X'],\r\n            ['X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X']\r\n        ],\r\n        positions: Array.from(positions),\r\n        founded: 0,\r\n        ships: {\r\n            'battleship': {\r\n                alive: true,\r\n                length: 4,\r\n                position: 0,\r\n                orientation: 'vertical',\r\n                life: 4\r\n            },\r\n            'destroyer': {\r\n                alive: true,\r\n                length: 3,\r\n                position: 0,\r\n                orientation: 'vertical',\r\n                life: 3\r\n            },\r\n            'aircraftcarrier': {\r\n                alive: true,\r\n                length: 5,\r\n                position: 0,\r\n                orientation: 'vertical',\r\n                life: 5\r\n            },\r\n            'submarine': {\r\n                alive: true,\r\n                length: 3,\r\n                position: 0,\r\n                orientation: 'vertical',\r\n                life: 3\r\n            },\r\n            'patrolboat': {\r\n                alive: true,\r\n                length: 2,\r\n                position: 0,\r\n                orientation: 'vertical',\r\n                life: 2\r\n            },\r\n        }\r\n    })\r\n\r\n    //สร้าง plyer state โดยใช้รูปแบบ player\r\n    const [playerState, setPlayerState] = useState(player)\r\n\r\n    function tryShip(ship, position, direction, propertyToTest) {\r\n        var check_position = playerState.positions[position]\r\n        var flag = true\r\n\r\n        for (var i = 1; i <= ship.length; i++) {\r\n            if (!check_position || check_position[propertyToTest]) {\r\n                flag = false;\r\n                break;\r\n            }\r\n            check_position = check_position[direction]\r\n        }\r\n\r\n        return flag\r\n    }\r\n\r\n    // ฟั่งชั่นที่ทำงานเมื่อผู้เล่นกดช่องตาราง \r\n    function play(e) {\r\n        if (props.alreadypick.includes(e.target.id)) {\r\n            console.log(props.enemy + ' choose the same position');\r\n        }\r\n        else {\r\n            if(props.turn === props.enemy){\r\n                var allDead = true\r\n\r\n                //เช็คว่ามีเรือรึเปล่า\r\n                props.setAlreadypick(arr => [...arr, e.target.id])\r\n                checkShip(e)\r\n                //เช็คว่าเกมจบรึยัง\r\n                for (var ship in playerState.ships) {\r\n                    if (playerState.ships[ship].alive) {\r\n                        allDead = false\r\n                    }\r\n                }\r\n                \r\n                if (allDead) {\r\n                    end()\r\n                    clearInterval(setInterval(AI, 100))\r\n                    clearInterval(setInterval(AI2, 100, playerState)) //to stop Nut's AI\r\n                    console.log('GAME OVER')\r\n                    props.setTurn(\"Team 1 win\")\r\n                }\r\n            }\r\n            else if(props.turn === props.player){\r\n                console.log(props.enemy + ' can not play')\r\n            }\r\n            else {\r\n                console.log('Not ' + props.enemy + ' turn')\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    // ฟังก์ชั่นสุ่มสำหรับเซ็กว่าผู้เล่นยิงโดนเรือตรงข้ามหรือไม่\r\n    function checkShip(e) {\r\n        // ให้ตัวแปล clicked เก็บตำแหน่งที่ผู้เล่นกด\r\n        var row = playerState.positions[e.target.id].row\r\n        var col = playerState.positions[e.target.id].col\r\n        // console.log(\"Clicked at \" + clicked)\r\n        var flag = false\r\n        // เช็คว่าเจอเรือไหม (เรือ: \"O\")\r\n        var check_cell = playerState.board[row + 1][col + 1]\r\n        if (!(check_cell === \"-\")) {\r\n            switch (check_cell) {\r\n                case 'B':\r\n                    playerState.ships['battleship'].life--\r\n                    if (playerState.ships['battleship'].life === 0) {\r\n                        playerState.ships['battleship'].alive = false\r\n                        var prow_position = playerState.ships['battleship'].position\r\n                        var directions = (playerState.ships['battleship'].orientation == 'e') ? 1 : 10\r\n                        for (var i=0; i < playerState.ships['battleship'].length; i++) {\r\n                            playerState.positions[prow_position + (i * directions)].sunk = true\r\n                        }\r\n                        console.log(playerState.name + \"'s Battleship is sunk!!\")\r\n                    }\r\n                    break\r\n                case 'D':\r\n                    playerState.ships['destroyer'].life--\r\n                    if (playerState.ships['destroyer'].life === 0) {\r\n                        playerState.ships['destroyer'].alive = false\r\n                        var prow_position = playerState.ships['destroyer'].position\r\n                        var directions = (playerState.ships['destroyer'].orientation == 'e') ? 1 : 10\r\n                        for (var i=0; i < playerState.ships['destroyer'].length; i++) {\r\n                            playerState.positions[prow_position + (i * directions)].sunk = true\r\n                        }\r\n                        console.log(playerState.name + \"'s Destroyer is sunk!!\")\r\n                    }\r\n                    break\r\n                case 'A':\r\n                    playerState.ships['aircraftcarrier'].life--\r\n                    if (playerState.ships['aircraftcarrier'].life === 0) {\r\n                        playerState.ships['aircraftcarrier'].alive = false\r\n                        var prow_position = playerState.ships['aircraftcarrier'].position\r\n                        var directions = (playerState.ships['aircraftcarrier'].orientation == 'e') ? 1 : 10\r\n                        for (var i=0; i < playerState.ships['aircraftcarrier'].length; i++) {\r\n                            playerState.positions[prow_position + (i * directions)].sunk = true\r\n                        }\r\n                        console.log(playerState.name + \"'s Aircraftcarrier is sunk!!\")\r\n                    }\r\n                    break\r\n                case 'S':\r\n                    playerState.ships['submarine'].life--\r\n                    if (playerState.ships['submarine'].life === 0) {\r\n                        playerState.ships['submarine'].alive = false\r\n                        var prow_position = playerState.ships['submarine'].position\r\n                        var directions = (playerState.ships['submarine'].orientation == 'e') ? 1 : 10\r\n                        for (var i=0; i < playerState.ships['submarine'].length; i++) {\r\n                            playerState.positions[prow_position + (i * directions)].sunk = true\r\n                        }\r\n                        console.log(playerState.name + \"'s Submarine is sunk!!\")\r\n                    }\r\n                    break\r\n                case 'P':\r\n                    playerState.ships['patrolboat'].life--\r\n                    if (playerState.ships['patrolboat'].life === 0) {\r\n                        playerState.ships['patrolboat'].alive = false\r\n                        var prow_position = playerState.ships['patrolboat'].position\r\n                        var directions = (playerState.ships['patrolboat'].orientation == 'e') ? 1 : 10\r\n                        for (var i=0; i < playerState.ships['patrolboat'].length; i++) {\r\n                            playerState.positions[prow_position + (i * directions)].sunk = true\r\n                        }\r\n                        console.log(playerState.name + \"'s Patrolboat is sunk!!\")\r\n                    }\r\n                    break\r\n            }\r\n            console.log(\"Position at \" + e.target.id)\r\n            playerState.positions[e.target.id].fired = true\r\n            playerState.positions[e.target.id].hit = true\r\n            // console.log('After hit')\r\n            e.target.src = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR9qcrQeLufxv61jZ194tG5CJvux0p4U4-r2g&usqp=CAU'\r\n            flag = true\r\n            props.setTurn(props.enemy)\r\n            explosion.play();\r\n        } else {\r\n            props.setTurn(props.player)\r\n            playerState.positions[e.target.id].fired = true\r\n            // console.log('After fired ')\r\n            console.log(playerState.name + ': nothing here...')\r\n            e.target.src = 'https://tmsvalue.co.uk/wp-content/uploads/2017/03/Square-500x500-red.png'\r\n            flag = false\r\n            water.play();\r\n        }\r\n\r\n        // console.table(playerState.positions)\r\n        calculateDensity(playerState)\r\n        var cells = document.getElementsByClassName(playerState.name + ' image2')\r\n        for (var i = 0; i < 100; i++) {\r\n            cells[i].innerHTML = playerState.positions[i].probability\r\n        }\r\n\r\n        return flag\r\n    }\r\n\r\n    function end() {\r\n        console.log(playerState.name + 'Lose!!!')\r\n    }\r\n\r\n    function placeShips() {\r\n        var index, row, col, orientation, validPosition = false, lastPosition;\r\n        for (var ship in playerState.ships) {\r\n            while (!validPosition) {\r\n                index = getRandomPosition();\r\n                row = Math.floor(index / 10) + 1\r\n                col = (index % 10) + 1\r\n                orientation = (Math.random() * 2 > 1) ? 'e' : 's';\r\n                if (tryShip(playerState.ships[ship], index, orientation, 'occupied')) {\r\n                    validPosition = true;\r\n                }\r\n            }\r\n            playerState.ships[ship].orientation = orientation\r\n            lastPosition = playerState.positions[index];\r\n            for (var i = 0; i < playerState.ships[ship].length; i++) {\r\n                switch (ship) {\r\n                    case 'battleship':\r\n                        if (playerState.ships[ship].orientation == 'e') {\r\n                            playerState.board[row][col + i] = 'B'\r\n                        }\r\n                        else if (playerState.ships[ship].orientation == 's') {\r\n                            playerState.board[row + i][col] = 'B'\r\n                        }\r\n                        break\r\n                    case 'destroyer':\r\n                        if (playerState.ships[ship].orientation == 'e') {\r\n                            playerState.board[row][col + i] = 'D'\r\n                        }\r\n                        else if (playerState.ships[ship].orientation == 's') {\r\n                            playerState.board[row + i][col] = 'D'\r\n                        }\r\n                        break\r\n                    case 'aircraftcarrier':\r\n                        if (playerState.ships[ship].orientation == 'e') {\r\n                            playerState.board[row][col + i] = 'A'\r\n                        }\r\n                        else if (playerState.ships[ship].orientation == 's') {\r\n                            playerState.board[row + i][col] = 'A'\r\n                        }\r\n                        break\r\n                    case 'submarine':\r\n                        if (playerState.ships[ship].orientation == 'e') {\r\n                            playerState.board[row][col + i] = 'S'\r\n                        }\r\n                        else if (playerState.ships[ship].orientation == 's') {\r\n                            playerState.board[row + i][col] = 'S'\r\n                        }\r\n                        break\r\n                    case 'patrolboat':\r\n                        if (playerState.ships[ship].orientation == 'e') {\r\n                            playerState.board[row][col + i] = 'P'\r\n                        }\r\n                        else if (playerState.ships[ship].orientation == 's') {\r\n                            playerState.board[row + i][col] = 'P'\r\n                        }\r\n                        break\r\n                }\r\n                lastPosition.occupied = true;\r\n                lastPosition = lastPosition[orientation];\r\n            }\r\n            playerState.ships[ship].position = index;\r\n            validPosition = false;\r\n        }\r\n    }\r\n\r\n    function getRandomPosition() {\r\n        return Math.floor(Math.random() * 100);\r\n    }\r\n\r\n    function startPlaying() {\r\n        setInterval(AI, 100)\r\n    }\r\n\r\n    calculateDensity(playerState)\r\n\r\n    useEffect(() => {\r\n        placeShips()\r\n        console.log(playerState.name + \" board: \")\r\n        console.log(playerState.board)\r\n        console.log(playerState.ships)\r\n    }, [setPlayerState])\r\n\r\n    // สร้างตารางโดยรับค่า id และ src\r\n    const createCell = (id, src) => {\r\n\r\n        // ถ้าเป็นแถวแรกให้สร้าง header ระบุเลขช่องด้วยนอกจากนั้นก็สร้างแค่ช่องปกติ\r\n        if (id < 10) {\r\n            return (\r\n                <th>\r\n                    {id}\r\n                    <td className='cell parent'>\r\n                        <img class=\"image1\" id={id} src={src} onClick={play} />\r\n                        <div class={playerState.name + ' image2'}> {Math.floor(playerState.positions[id].probability)} </div>\r\n                    </td>\r\n                </th>\r\n            )\r\n        }\r\n        return (\r\n            <td className='cell parent'>\r\n                <img class=\"image1\" id={id} src={src} onClick={play} />\r\n                <div class={playerState.name + ' image2'}> {Math.floor(playerState.positions[id].probability)} </div>\r\n            </td>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <h2>{props.player}</h2>\r\n            <table id={playerState.name}>\r\n\r\n                {Array.from({ length: 10 }).map((_, row) => {\r\n\r\n                    var ascii = 65\r\n                    return (\r\n                        <tr>\r\n                            <th>\r\n                                {String.fromCharCode(ascii + row)}\r\n                            </th>\r\n                            {Array.from({ length: 10 }).map((_, col) => {\r\n                                var index = ((10 - row - 1) * 10) + (10 - col)\r\n                                var id = (row * 10) + col\r\n                                var src = 'map/' + index + '.jpg'\r\n                                return (\r\n                                    createCell(id, src)\r\n                                )\r\n                            })}\r\n                        </tr>\r\n                    )\r\n                })}\r\n            </table>\r\n            <Button id='button_AI2' className='hidden' onClick={startPlaying}>Start</Button>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Table2","C:\\Users\\gurum\\Documents\\AI project\\battleship\\src\\AI\\AI_team1.js",["108","109","110"],"const randomness = 3\r\n\r\nfunction tryShip(playerState, ship, position, direction, propertyToTest) {\r\n    var check_position = playerState.positions[position]\r\n    var flag = true\r\n\r\n    for (var i = 1; i <= ship.length; i++) {\r\n        if (!check_position || check_position[propertyToTest]) {\r\n            flag = false;\r\n            break;\r\n        }\r\n        check_position = check_position[direction]\r\n    }\r\n\r\n    return flag\r\n}\r\n\r\nexport const AI = () => {\r\n    var max = 0\r\n    var max_position\r\n    var table = document.getElementById('Team 2')\r\n    var cells = table.getElementsByClassName('image1')\r\n    var positions = Array.from(table.getElementsByClassName('Team 2 image2'))\r\n    positions.forEach((position, index) => {\r\n        if (max < parseInt(position.innerHTML)) {\r\n            max = parseInt(position.innerHTML)\r\n            max_position = index\r\n        }\r\n    })\r\n\r\n    if (max_position) {\r\n        cells[max_position].click()\r\n        // console.log(document.getElementById(max_position))\r\n        console.log(max_position)\r\n    }\r\n}\r\n\r\nexport function calculateDensity(playerState) {\r\n    var current_position\r\n    var directions = { 'w': null, 'n': null, 'e': null, 's': null };\r\n    for (var i = 0; i < 100; i++) {\r\n        playerState.positions[i].probability = 0\r\n    }\r\n    for (var shipName in playerState.ships) {\r\n        var ship = playerState.ships[shipName]\r\n        if (ship.alive) {\r\n            for (var i = 0; i < 100; i++) {\r\n                if (tryShip(playerState, ship, i, 'e', 'fired')) {\r\n                    current_position = playerState.positions[i]\r\n                    for (var j = 0; j < ship.length; j++) {\r\n                        current_position.probability++\r\n                        current_position = current_position['e']\r\n                    }\r\n                }\r\n                if (tryShip(playerState, ship, i, 's', 'fired')) {\r\n                    current_position = playerState.positions[i]\r\n                    for (var j = 0; j < ship.length; j++) {\r\n                        current_position.probability++\r\n                        current_position = current_position['s']\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    for (var i = 0; i < 100; i++) {\r\n        if (playerState.positions[i].probability > 0) {\r\n            playerState.positions[i].probability += Math.floor(Math.random() * randomness)\r\n        }\r\n\r\n        if (playerState.positions[i].fired) {\r\n            if (playerState.positions[i].hit && !playerState.positions[i].sunk) {\r\n\r\n                for (var direction in directions) {\r\n                    var hitStreak = 1\r\n                    var checked_position = playerState.positions[i]\r\n                    while (checked_position[direction] && checked_position[direction].hit && !checked_position[direction].sunk) {\r\n                        hitStreak++\r\n                        console.log('Hitstreak now is ' + String(hitStreak))\r\n                        checked_position = checked_position[direction]\r\n                    }\r\n                    checked_position = checked_position[direction]\r\n                    if (checked_position && !checked_position.fired) {\r\n                        checked_position.probability += hitStreak * 100\r\n                        console.log(checked_position.index + ' is increase for ' + String(hitStreak * 100))\r\n                    }\r\n                }\r\n            }\r\n            playerState.positions[i].probability = -1\r\n        }\r\n    }\r\n}","C:\\Users\\gurum\\Documents\\AI project\\battleship\\src\\AI\\AI_team2.js",["111","112","113","114","115","116","117","118"],"export function AI2(playerState) {\r\n    var pos\r\n    var max = 0\r\n    var max_position\r\n    var table = document.getElementById('Team 1')\r\n    var cells = table.getElementsByClassName('image1')\r\n\r\n    // Pick the cell with highest prob\r\n    for(var i = 0; i < 100; i++) {\r\n        if (max < playerState.positions[i].probability) {\r\n            max = playerState.positions[i].probability\r\n            max_position = i\r\n        }\r\n    }\r\n\r\n    // If there is no such cell\r\n    if(max === 0)\r\n    {\r\n        // Randomly pick one\r\n        do {\r\n            pos = Math.floor(Math.random() * 100)\r\n        } while (playerState.positions[pos].fired)\r\n        max_position = pos\r\n    }\r\n\r\n    if(max_position >= 0) {\r\n        cells[max_position].click()\r\n    }\r\n\r\n    if(playerState.positions[max_position].fired || playerState.positions[max_position].hit)\r\n    {\r\n        playerState.positions[max_position].probability = -1\r\n        calculateNextPos(playerState, max_position)\r\n    }\r\n}\r\n\r\nfunction calculateNextPos(playerState, current_position) {\r\n    var randomness = 2\r\n    var directions = { 'w': null, 'n': null, 'e': null, 's': null };\r\n    var oppositeDirection\r\n    var currentCell = playerState.positions[current_position]\r\n\r\n    // If click on ship\r\n    if(currentCell.hit) {\r\n        // Calculate adjacent cell's probability\r\n        for(var direction in directions) {\r\n            var adjacent = currentCell[direction]\r\n            var streak = 1\r\n\r\n            switch(direction)\r\n            {\r\n                case 'w':\r\n                    oppositeDirection = 'e'\r\n                    break\r\n                case 'e':\r\n                    oppositeDirection = 'w'\r\n                    break\r\n                case 'n':\r\n                    oppositeDirection = 's'\r\n                    break\r\n                case 's':\r\n                    oppositeDirection = 'n'\r\n                    break\r\n            }\r\n\r\n            // If the adjacent cell has never been picked\r\n            if(adjacent && adjacent.probability >= 0){\r\n                /*\r\n                Check the next 2 cells with same alignment\r\n                    → If both of them is hit but still not sunk \r\n                        → likely to be the same ship\r\n                            → should pick in the same alignment → more likely to hit\r\n                                → give more probability to adjacent cell\r\n\r\n                  [ ] [ ] [ ]\r\n                  [X] [X] [ ] ← Should pick here\r\n                  [ ] [ ] [ ]\r\n                \r\n                */ \r\n                var checker1 = adjacent[oppositeDirection]\r\n                var checker2 = checker1[oppositeDirection]\r\n                if(checker1){\r\n                    while(checker1 && checker1.hit && !checker1.sunk && checker2 && checker2.hit && !checker2.sunk){\r\n                        streak += 1\r\n                        checker1 = checker1[oppositeDirection]\r\n                        checker2 = checker2[oppositeDirection]\r\n                    }\r\n                }\r\n\r\n                var random = Math.floor(50 * (Math.random() * (randomness - 1) + 1))\r\n                adjacent.probability += streak * random\r\n            }\r\n            // If the adjacent cell is out of map and the next 2 cell with same alignment is hit and not sunk, the next pick should be the first unpicked cell on the opposite side\r\n            else if(adjacent === null)\r\n            {\r\n                var checker1 = currentCell\r\n                var checker2 = checker1[oppositeDirection]\r\n                if(checker1){\r\n                    while(checker1 && checker1.hit && !checker1.sunk && checker2 && checker2.hit && !checker2.sunk){\r\n                        streak += 1\r\n                        checker1 = checker1[oppositeDirection]\r\n                        checker2 = checker2[oppositeDirection]\r\n                    }\r\n                }\r\n                if(checker2)\r\n                {\r\n                    checker2.probability *= streak\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // If not click on ship\r\n    else if(currentCell.fired)\r\n    {\r\n        for(var direction in directions)\r\n        {\r\n            var adjacent = currentCell[direction]\r\n            var streak = 1\r\n\r\n            switch(direction)\r\n            {\r\n                case 'w':\r\n                    oppositeDirection = 'e'\r\n                    break\r\n                case 'e':\r\n                    oppositeDirection = 'w'\r\n                    break\r\n                case 'n':\r\n                    oppositeDirection = 's'\r\n                    break\r\n                case 's':\r\n                    oppositeDirection = 'n'\r\n                    break\r\n            }\r\n\r\n            /*\r\n            If adjacent cell is not sunk\r\n                → the other part of the ship must be on the other side\r\n                    -> give the other side unpicked cell (that isn't out of the map) the highest probability\r\n\r\n                                       [ ] [ ] [ ] [ ]\r\n                 Ship should be here → [ ] [X] [X] [M] ← Miss the ship here\r\n                                       [ ] [ ] [ ] [ ]\r\n            */\r\n            if (adjacent && adjacent.hit && !adjacent.sunk)\r\n            {\r\n                var checker1 = adjacent\r\n                while(checker1 && checker1.hit && !checker1.sunk)\r\n                {\r\n                    streak += 1\r\n                    checker1 = checker1[direction]\r\n                }\r\n                if(checker1 && checker1 >= 0)\r\n                {\r\n                    checker1.probability *= streak\r\n                }\r\n            }\r\n            /*\r\n            But if it sunk\r\n                -> We should try pick randomly more than pick next to the sunk ship because the ship more likely to spread out more than stick together\r\n            */\r\n            else if(currentCell[direction] && currentCell[direction].sunk && currentCell[oppositeDirection] && (!currentCell[oppositeDirection].fired || !currentCell[oppositeDirection].hit))\r\n            {\r\n                for(var i = 0; i < 100; i++){\r\n                    if(playerState.positions[i].probability > 0)\r\n                    {\r\n                        playerState.positions[i].probability = 0\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    console.log(\"\")\r\n}\r\n\r\n",{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","severity":1,"message":"124","line":3,"column":14,"nodeType":"125","messageId":"126","endLine":3,"endColumn":30},{"ruleId":"123","severity":1,"message":"127","line":11,"column":11,"nodeType":"125","messageId":"126","endLine":11,"endColumn":21},{"ruleId":"128","severity":1,"message":"129","line":29,"column":14,"nodeType":"125","messageId":"130","endLine":29,"endColumn":15},{"ruleId":"131","severity":1,"message":"132","line":160,"column":13,"nodeType":"133","messageId":"134","endLine":221,"endColumn":14},{"ruleId":"135","severity":1,"message":"136","line":166,"column":87,"nodeType":"137","messageId":"138","endLine":166,"endColumn":89},{"ruleId":"128","severity":1,"message":"139","line":177,"column":29,"nodeType":"125","messageId":"130","endLine":177,"endColumn":42},{"ruleId":"128","severity":1,"message":"140","line":178,"column":29,"nodeType":"125","messageId":"130","endLine":178,"endColumn":39},{"ruleId":"135","severity":1,"message":"136","line":178,"column":86,"nodeType":"137","messageId":"138","endLine":178,"endColumn":88},{"ruleId":"128","severity":1,"message":"129","line":179,"column":34,"nodeType":"125","messageId":"130","endLine":179,"endColumn":35},{"ruleId":"128","severity":1,"message":"139","line":189,"column":29,"nodeType":"125","messageId":"130","endLine":189,"endColumn":42},{"ruleId":"128","severity":1,"message":"140","line":190,"column":29,"nodeType":"125","messageId":"130","endLine":190,"endColumn":39},{"ruleId":"135","severity":1,"message":"136","line":190,"column":92,"nodeType":"137","messageId":"138","endLine":190,"endColumn":94},{"ruleId":"128","severity":1,"message":"129","line":191,"column":34,"nodeType":"125","messageId":"130","endLine":191,"endColumn":35},{"ruleId":"128","severity":1,"message":"139","line":201,"column":29,"nodeType":"125","messageId":"130","endLine":201,"endColumn":42},{"ruleId":"128","severity":1,"message":"140","line":202,"column":29,"nodeType":"125","messageId":"130","endLine":202,"endColumn":39},{"ruleId":"135","severity":1,"message":"136","line":202,"column":86,"nodeType":"137","messageId":"138","endLine":202,"endColumn":88},{"ruleId":"128","severity":1,"message":"129","line":203,"column":34,"nodeType":"125","messageId":"130","endLine":203,"endColumn":35},{"ruleId":"128","severity":1,"message":"139","line":213,"column":29,"nodeType":"125","messageId":"130","endLine":213,"endColumn":42},{"ruleId":"128","severity":1,"message":"140","line":214,"column":29,"nodeType":"125","messageId":"130","endLine":214,"endColumn":39},{"ruleId":"135","severity":1,"message":"136","line":214,"column":87,"nodeType":"137","messageId":"138","endLine":214,"endColumn":89},{"ruleId":"128","severity":1,"message":"129","line":215,"column":34,"nodeType":"125","messageId":"130","endLine":215,"endColumn":35},{"ruleId":"128","severity":1,"message":"129","line":242,"column":18,"nodeType":"125","messageId":"130","endLine":242,"endColumn":19},{"ruleId":"131","severity":1,"message":"132","line":268,"column":17,"nodeType":"133","messageId":"134","endLine":309,"endColumn":18},{"ruleId":"135","severity":1,"message":"136","line":270,"column":65,"nodeType":"137","messageId":"138","endLine":270,"endColumn":67},{"ruleId":"135","severity":1,"message":"136","line":273,"column":70,"nodeType":"137","messageId":"138","endLine":273,"endColumn":72},{"ruleId":"135","severity":1,"message":"136","line":278,"column":65,"nodeType":"137","messageId":"138","endLine":278,"endColumn":67},{"ruleId":"135","severity":1,"message":"136","line":281,"column":70,"nodeType":"137","messageId":"138","endLine":281,"endColumn":72},{"ruleId":"135","severity":1,"message":"136","line":286,"column":65,"nodeType":"137","messageId":"138","endLine":286,"endColumn":67},{"ruleId":"135","severity":1,"message":"136","line":289,"column":70,"nodeType":"137","messageId":"138","endLine":289,"endColumn":72},{"ruleId":"135","severity":1,"message":"136","line":294,"column":65,"nodeType":"137","messageId":"138","endLine":294,"endColumn":67},{"ruleId":"135","severity":1,"message":"136","line":297,"column":70,"nodeType":"137","messageId":"138","endLine":297,"endColumn":72},{"ruleId":"135","severity":1,"message":"136","line":302,"column":65,"nodeType":"137","messageId":"138","endLine":302,"endColumn":67},{"ruleId":"135","severity":1,"message":"136","line":305,"column":70,"nodeType":"137","messageId":"138","endLine":305,"endColumn":72},{"ruleId":"141","severity":1,"message":"142","line":331,"column":8,"nodeType":"143","endLine":331,"endColumn":24,"suggestions":"144"},{"ruleId":"145","severity":1,"message":"146","line":342,"column":25,"nodeType":"147","endLine":342,"endColumn":80},{"ruleId":"145","severity":1,"message":"146","line":350,"column":17,"nodeType":"147","endLine":350,"endColumn":72},{"ruleId":"123","severity":1,"message":"127","line":11,"column":11,"nodeType":"125","messageId":"126","endLine":11,"endColumn":21},{"ruleId":"128","severity":1,"message":"129","line":29,"column":14,"nodeType":"125","messageId":"130","endLine":29,"endColumn":15},{"ruleId":"131","severity":1,"message":"132","line":160,"column":13,"nodeType":"133","messageId":"134","endLine":221,"endColumn":14},{"ruleId":"135","severity":1,"message":"136","line":166,"column":87,"nodeType":"137","messageId":"138","endLine":166,"endColumn":89},{"ruleId":"128","severity":1,"message":"139","line":177,"column":29,"nodeType":"125","messageId":"130","endLine":177,"endColumn":42},{"ruleId":"128","severity":1,"message":"140","line":178,"column":29,"nodeType":"125","messageId":"130","endLine":178,"endColumn":39},{"ruleId":"135","severity":1,"message":"136","line":178,"column":86,"nodeType":"137","messageId":"138","endLine":178,"endColumn":88},{"ruleId":"128","severity":1,"message":"129","line":179,"column":34,"nodeType":"125","messageId":"130","endLine":179,"endColumn":35},{"ruleId":"128","severity":1,"message":"139","line":189,"column":29,"nodeType":"125","messageId":"130","endLine":189,"endColumn":42},{"ruleId":"128","severity":1,"message":"140","line":190,"column":29,"nodeType":"125","messageId":"130","endLine":190,"endColumn":39},{"ruleId":"135","severity":1,"message":"136","line":190,"column":92,"nodeType":"137","messageId":"138","endLine":190,"endColumn":94},{"ruleId":"128","severity":1,"message":"129","line":191,"column":34,"nodeType":"125","messageId":"130","endLine":191,"endColumn":35},{"ruleId":"128","severity":1,"message":"139","line":201,"column":29,"nodeType":"125","messageId":"130","endLine":201,"endColumn":42},{"ruleId":"128","severity":1,"message":"140","line":202,"column":29,"nodeType":"125","messageId":"130","endLine":202,"endColumn":39},{"ruleId":"135","severity":1,"message":"136","line":202,"column":86,"nodeType":"137","messageId":"138","endLine":202,"endColumn":88},{"ruleId":"128","severity":1,"message":"129","line":203,"column":34,"nodeType":"125","messageId":"130","endLine":203,"endColumn":35},{"ruleId":"128","severity":1,"message":"139","line":213,"column":29,"nodeType":"125","messageId":"130","endLine":213,"endColumn":42},{"ruleId":"128","severity":1,"message":"140","line":214,"column":29,"nodeType":"125","messageId":"130","endLine":214,"endColumn":39},{"ruleId":"135","severity":1,"message":"136","line":214,"column":87,"nodeType":"137","messageId":"138","endLine":214,"endColumn":89},{"ruleId":"128","severity":1,"message":"129","line":215,"column":34,"nodeType":"125","messageId":"130","endLine":215,"endColumn":35},{"ruleId":"128","severity":1,"message":"129","line":243,"column":18,"nodeType":"125","messageId":"130","endLine":243,"endColumn":19},{"ruleId":"131","severity":1,"message":"132","line":269,"column":17,"nodeType":"133","messageId":"134","endLine":310,"endColumn":18},{"ruleId":"135","severity":1,"message":"136","line":271,"column":65,"nodeType":"137","messageId":"138","endLine":271,"endColumn":67},{"ruleId":"135","severity":1,"message":"136","line":274,"column":70,"nodeType":"137","messageId":"138","endLine":274,"endColumn":72},{"ruleId":"135","severity":1,"message":"136","line":279,"column":65,"nodeType":"137","messageId":"138","endLine":279,"endColumn":67},{"ruleId":"135","severity":1,"message":"136","line":282,"column":70,"nodeType":"137","messageId":"138","endLine":282,"endColumn":72},{"ruleId":"135","severity":1,"message":"136","line":287,"column":65,"nodeType":"137","messageId":"138","endLine":287,"endColumn":67},{"ruleId":"135","severity":1,"message":"136","line":290,"column":70,"nodeType":"137","messageId":"138","endLine":290,"endColumn":72},{"ruleId":"135","severity":1,"message":"136","line":295,"column":65,"nodeType":"137","messageId":"138","endLine":295,"endColumn":67},{"ruleId":"135","severity":1,"message":"136","line":298,"column":70,"nodeType":"137","messageId":"138","endLine":298,"endColumn":72},{"ruleId":"135","severity":1,"message":"136","line":303,"column":65,"nodeType":"137","messageId":"138","endLine":303,"endColumn":67},{"ruleId":"135","severity":1,"message":"136","line":306,"column":70,"nodeType":"137","messageId":"138","endLine":306,"endColumn":72},{"ruleId":"141","severity":1,"message":"142","line":334,"column":8,"nodeType":"143","endLine":334,"endColumn":24,"suggestions":"148"},{"ruleId":"145","severity":1,"message":"146","line":345,"column":25,"nodeType":"147","endLine":345,"endColumn":80},{"ruleId":"145","severity":1,"message":"146","line":353,"column":17,"nodeType":"147","endLine":353,"endColumn":72},{"ruleId":"128","severity":1,"message":"129","line":47,"column":22,"nodeType":"125","messageId":"130","endLine":47,"endColumn":23},{"ruleId":"128","severity":1,"message":"149","line":57,"column":30,"nodeType":"125","messageId":"130","endLine":57,"endColumn":31},{"ruleId":"128","severity":1,"message":"129","line":66,"column":14,"nodeType":"125","messageId":"130","endLine":66,"endColumn":15},{"ruleId":"131","severity":1,"message":"132","line":50,"column":13,"nodeType":"133","messageId":"134","endLine":64,"endColumn":14},{"ruleId":"128","severity":1,"message":"150","line":96,"column":21,"nodeType":"125","messageId":"130","endLine":96,"endColumn":29},{"ruleId":"128","severity":1,"message":"151","line":97,"column":21,"nodeType":"125","messageId":"130","endLine":97,"endColumn":29},{"ruleId":"128","severity":1,"message":"152","line":116,"column":17,"nodeType":"125","messageId":"130","endLine":116,"endColumn":26},{"ruleId":"128","severity":1,"message":"153","line":118,"column":17,"nodeType":"125","messageId":"130","endLine":118,"endColumn":25},{"ruleId":"128","severity":1,"message":"154","line":119,"column":17,"nodeType":"125","messageId":"130","endLine":119,"endColumn":23},{"ruleId":"131","severity":1,"message":"132","line":121,"column":13,"nodeType":"133","messageId":"134","endLine":135,"endColumn":14},{"ruleId":"128","severity":1,"message":"150","line":148,"column":21,"nodeType":"125","messageId":"130","endLine":148,"endColumn":29},"no-native-reassign",["155"],"no-negated-in-lhs",["156"],"no-unused-vars","'calculateDensity' is defined but never used.","Identifier","unusedVar","'randomness' is assigned a value but never used.","no-redeclare","'i' is already defined.","redeclared","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'prow_position' is already defined.","'directions' is already defined.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'placeShips', 'playerState.board', 'playerState.name', and 'playerState.ships'. Either include them or remove the dependency array.","ArrayExpression",["157"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["158"],"'j' is already defined.","'checker1' is already defined.","'checker2' is already defined.","'direction' is already defined.","'adjacent' is already defined.","'streak' is already defined.","no-global-assign","no-unsafe-negation",{"desc":"159","fix":"160"},{"desc":"159","fix":"161"},"Update the dependencies array to be: [placeShips, playerState.board, playerState.name, playerState.ships, setPlayerState]",{"range":"162","text":"163"},{"range":"164","text":"163"},[14205,14221],"[placeShips, playerState.board, playerState.name, playerState.ships, setPlayerState]",[14259,14275]]